[["Map",1,2,9,10,69,70],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.14.1","content-config-digest","8f01df8ca85b4ff4","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://example.com\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":false,\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[[null,{\"plugins\":[{\"name\":\"Line numbers\",\"styleSettings\":{\"defaultValues\":{\"lineNumbers\":{\"foreground\":\"inherit\",\"highlightForeground\":\"inherit\"}},\"cssVarExclusions\":[],\"cssVarReplacements\":[],\"preventUnitlessValues\":[]},\"hooks\":{}},{\"name\":\"astro-expressive-code\",\"hooks\":{}}]}]],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"staticImportMetaEnv\":false,\"chromeDevtoolsWorkspace\":false,\"failOnPrerenderConflict\":false},\"legacy\":{\"collections\":false}}","pages",["Map",11,12,32,33,57,58],"about",{"id":11,"data":13,"body":17,"filePath":18,"assetImports":19,"digest":21,"rendered":22},{"title":14,"description":14,"pubDate":15,"heroImage":16},"About Me",["Date","2022-02-19T17:00:00.000Z"],"__ASTRO_IMAGE_../assets/blog-placeholder-about.jpg","Hi there! I'm a **passionate coder** with years of experience in the tech field.\nBorn in the _90s_, I've developed a strong love for **software development**,\nespecially **web**.\n\nWhen I'm not coding, you can find me **playing guitar** or **capturing\nmoments** through my photography. Let's connect and share our interests!","src/pages/about.md",[20],"../assets/blog-placeholder-about.jpg","bef73f91beb7cb74",{"html":23,"metadata":24},"\u003Cp>Hi there! I’m a \u003Cstrong>passionate coder\u003C/strong> with years of experience in the tech field.\nBorn in the \u003Cem>90s\u003C/em>, I’ve developed a strong love for \u003Cstrong>software development\u003C/strong>,\nespecially \u003Cstrong>web\u003C/strong>.\u003C/p>\n\u003Cp>When I’m not coding, you can find me \u003Cstrong>playing guitar\u003C/strong> or \u003Cstrong>capturing\nmoments\u003C/strong> through my photography. Let’s connect and share our interests!\u003C/p>",{"headings":25,"localImagePaths":26,"remoteImagePaths":27,"frontmatter":28,"imagePaths":31},[],[],[],{"layout":29,"title":14,"description":14,"pubDate":30,"heroImage":20},"../layouts/Page.astro","Feb 20 2022",[],"disclaimer",{"id":32,"data":34,"body":38,"filePath":39,"assetImports":40,"digest":41,"rendered":42},{"title":35,"description":36,"pubDate":37,"heroImage":16},"Disclaimer","Disclaimer for Hytorium",["Date","2022-02-19T17:00:00.000Z"],"Should you require further information or have any inquiries regarding our disclaimer, please feel free to contact us via email at nguyenhy311@gmail.com. This disclaimer has been formulated with guidance from the Free Disclaimer Generator.\n\n## Disclaimers for Hytorium\n\nAll information provided on this website - https://nguyenhy.github.io/ - is published in good faith and for general informational purposes only. Hytorium does not provide any guarantees regarding the completeness, reliability, or accuracy of this information. Any actions you take based on the information provided on this website (Hytorium) are strictly at your own risk. Hytorium will not be liable for any losses or damages incurred in connection with the use of our website.\n\nThrough our website, you may encounter hyperlinks leading to external sites. While we diligently strive to provide quality links to useful and ethical websites, we retain no control over the content and nature of these external sites. Links to other websites do not constitute an endorsement of all the content found therein. The owners and content of these sites may change without notice, potentially before we have the opportunity to remove any broken links.\n\nPlease be advised that upon leaving our website, other sites may possess differing privacy policies and terms that are beyond our control. We strongly recommend that you review the Privacy Policies and \"Terms of Service\" of these sites before engaging in any transactions or submitting any personal information.\n\n## Consent\n\nBy utilizing our website, you hereby consent to our disclaimer and agree to its terms.","src/pages/disclaimer.md",[20],"50d35ea958ba0751",{"html":43,"metadata":44},"\u003Cp>Should you require further information or have any inquiries regarding our disclaimer, please feel free to contact us via email at \u003Ca href=\"mailto:nguyenhy311@gmail.com\">nguyenhy311@gmail.com\u003C/a>. This disclaimer has been formulated with guidance from the Free Disclaimer Generator.\u003C/p>\n\u003Ch2 id=\"disclaimers-for-hytorium\">Disclaimers for Hytorium\u003C/h2>\n\u003Cp>All information provided on this website - \u003Ca href=\"https://nguyenhy.github.io/\">https://nguyenhy.github.io/\u003C/a> - is published in good faith and for general informational purposes only. Hytorium does not provide any guarantees regarding the completeness, reliability, or accuracy of this information. Any actions you take based on the information provided on this website (Hytorium) are strictly at your own risk. Hytorium will not be liable for any losses or damages incurred in connection with the use of our website.\u003C/p>\n\u003Cp>Through our website, you may encounter hyperlinks leading to external sites. While we diligently strive to provide quality links to useful and ethical websites, we retain no control over the content and nature of these external sites. Links to other websites do not constitute an endorsement of all the content found therein. The owners and content of these sites may change without notice, potentially before we have the opportunity to remove any broken links.\u003C/p>\n\u003Cp>Please be advised that upon leaving our website, other sites may possess differing privacy policies and terms that are beyond our control. We strongly recommend that you review the Privacy Policies and “Terms of Service” of these sites before engaging in any transactions or submitting any personal information.\u003C/p>\n\u003Ch2 id=\"consent\">Consent\u003C/h2>\n\u003Cp>By utilizing our website, you hereby consent to our disclaimer and agree to its terms.\u003C/p>",{"headings":45,"localImagePaths":53,"remoteImagePaths":54,"frontmatter":55,"imagePaths":56},[46,50],{"depth":47,"slug":48,"text":49},2,"disclaimers-for-hytorium","Disclaimers for Hytorium",{"depth":47,"slug":51,"text":52},"consent","Consent",[],[],{"layout":29,"title":35,"description":36,"pubDate":30,"heroImage":20},[],"playground",{"id":57,"data":59,"body":63,"filePath":64,"assetImports":65,"digest":67,"deferredRender":68},{"title":60,"description":60,"pubDate":61,"heroImage":62},"Playground",["Date","2025-09-28T17:00:00.000Z"],"__ASTRO_IMAGE_../assets/blog-placeholder-2.jpg","import Playground from \"../components/playground/Playground.astro\"\n\n\n\u003CPlayground />","src/pages/playground.mdx",[66],"../assets/blog-placeholder-2.jpg","86452f23492e8ec8",true,"blog",["Map",71,72,83,84,93,94,103,104,113,114,123,124,135,136,145,146,154,155,164,165],"web-development/html-introduction",{"id":71,"data":73,"body":78,"filePath":79,"assetImports":80,"digest":82,"deferredRender":68},{"title":74,"description":75,"pubDate":76,"heroImage":77},"Introduction To HTML","Simple introduction to HTML for absolutely beginner",["Date","2022-02-23T17:00:00.000Z"],"__ASTRO_IMAGE_../../../assets/blog-placeholder-4.jpg","# Simple introduction to HTML for absolutely beginner\n\n\n## Goals\nThe following article will guide you through some basic concept about HTML.\nWe'll look into below **HTML** code and try to understand what each line of code does, and how can we expand it for our personal use case.\n\n```html\n\u003C!DOCTYPE html>\n\u003Chtml lang=\"en\">\n  \u003Chead>\u003C/head>\n  \u003Cbody>\n    \u003Cspan>hello world\u003C/span>\n  \u003C/body>\n\u003C/html>\n```\n\n## HTML?\n\n> [HTML](https://developer.mozilla.org/en-US/docs/Glossary/HTML) (`H`yper`T`ext `M`arkup `L`anguage) is a descriptive language that specifies webpage structure.\n\nHTML is a series of [elements](https://developer.mozilla.org/en-US/docs/Glossary/Element), which you use to enclose, wrap, markup, ... different parts of the content in a certain way.\nIt can be simple or complicated as the web developer wants it to be.\n\n**For example:**\nIf we want some part of text to stand by itself, we can enclose it inside paragraph element [`\u003Cp>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p)\n, and if we want some other part of text to be bold, we can use [`\u003Cstrong>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strong) element.\n\n```html\n\u003Cp>\n  the \u003Cstrong>quick\u003C/strong> brown fox jumps over the \u003Cstrong>lazy\u003C/strong> dog\n\u003C/p>\n```\n\nwill output:\n\n> the \u003Cstrong>quick\u003C/strong> brown fox jumps over the \u003Cstrong>lazy\u003C/strong>{\" \"} dog\n\n## Why we need HTML again?\n### TLDR\n- HTML is building block of FrontEnd Web Development\n- We need it to create basic layout, that include: `image`, `text`, `video` player, `audio` player, ...\n- You can jump into this [summary](#summary) to review what `HTML` look like and move on\n\n### Explain\nComparing to the creation of a book, HTML provides the essential tools to construct the different components that make up the book.\n\nFor example, in a book, chapters are essential for organizing content and providing a logical flow.\nSimilarly, HTML offers structural elements like `\u003Cdiv>`, `\u003Csection>`, and `\u003Carticle>` to divide the webpage into meaningful sections.\n\nIn a book, paragraphs are used to present information in a coherent manner.\nHTML's `\u003Cp>` tag serves a similar purpose by defining paragraphs of text on a webpage.\n\nHTML allows frontend developers to assemble elements like paragraphs, headings, images, and links to build a well-structured webpage.\nHowever, HTML alone doesn't determine the visual appearance or styling of these components; that's where CSS comes in.\nCSS adds aesthetics and design elements to enhance the webpage, similar to how book covers and typography enhance the reading experience.\nTogether, HTML and CSS enable developers to create engaging and visually appealing webpages.\n\n## HTML element\n\n- [Tags](https://html.spec.whatwg.org/multipage/syntax.html#elements-2): are used to delimit the **start** and **end** of **elements** in the markup.\n  In `\u003Cspan>\u003C/span>`, `\u003Cspan>` is start tag and `\u003C/span>` is end tag\n\n- [Element](https://developer.mozilla.org/en-US/docs/Glossary/Element): is a part of a webpage. In [XML](https://developer.mozilla.org/en-US/docs/Glossary/XML) and [HTML](https://developer.mozilla.org/en-US/docs/Glossary/HTML), an element may contain a data item or a chunk of text or an image, or perhaps nothing.\n  A typical element includes an opening tag with some attributes, enclosed text content, and a closing tag.\n\n  There's are 6 kind of HTML elements, which is:\n\n  1. **void** (empty) elements: only have a start tag, end tags must not be specified for void elements.\n    `area`, `base`, `br`, `col`, `embed`, `hr`, `img`, `input`, `link`, `meta`, `param`, `source`, `track`, `wbr`\n\n    **Note**: end tags [must not be](https://html.spec.whatwg.org/multipage/syntax.html#elements-2) specified for void elements\n\n```html /\u003Cimg/#a /\u003Carea/#b\n\u003Cimg\n  src=\"workplace.jpg\"\n  alt=\"Workplace\"\n  usemap=\"#workmap\"\n  width=\"400\"\n  height=\"379\"\n/>\n\n\u003Cmap name=\"workmap\">\n  \u003Carea\n    shape=\"rect\"\n    coords=\"34,44,270,350\"\n    alt=\"Computer\"\n    href=\"computer.htm\"\n  />\n  \u003Carea\n    shape=\"rect\"\n    coords=\"290,172,333,250\"\n    alt=\"Phone\"\n    href=\"phone.htm\"\n  />\n  \u003Carea\n    shape=\"circle\"\n    coords=\"337,300,44\"\n    alt=\"Cup of coffee\"\n    href=\"coffee.htm\"\n  />\n\u003C/map>\n```\n\n  2. template elements: `template`\n\n```html /template/#a\n\u003Ctemplate id=\"row\">\n  \u003Ctr>\n    \u003Ctd>content\u003C/td>\n  \u003C/tr>\n\u003C/template>\n```\n\n  3. raw text elements: `style`, `script`\n\n```html /\u003Cstyle>/#a /\u003Cscript>/#b\n\u003Cstyle>\n  body {\n    background-color: grey;\n  }\n\u003C/style>\n\u003Cscript>\n  document.body.style.backgroundColor = \"grey\";\n\u003C/script>\n```\n\n  4. escapable raw text elements: `textarea`, `title`\n\n    It's called `escapable raw text elements` because their contents are treated as `plain text` and can contain special characters or entities that need to be escaped.\n\n```html /\u003Ctitle>/#a /\u003Ctextarea>/#b\n\u003C!DOCTYPE html>\n\u003Chtml lang=\"en\">\n  \u003Chead>\n    \u003Ctitle>this's browser tab title\u003C/title>\n  \u003C/head>\n  \u003Cbody>\n    \u003Ctextarea>place some content here\u003C/textarea>\n  \u003C/body>\n\u003C/html>\n```\n\n    Result:\n    > {\u003Cbody>\u003Ctextarea>place some content here\u003C/textarea>\u003C/body>}\n\n  5. foreign elements: `math`\n\n```html\n\u003Cmath>\n    \u003Cmrow>\n        \u003Cmrow>\n            \u003Cmsup>\n                \u003Cmi>x\u003C/mi>\n                \u003Cmn>2\u003C/mn>\n            \u003C/msup>\n            \u003Cmo>+\u003C/mo>\n            \u003Cmsup>\n                \u003Cmi>y\u003C/mi>\n                \u003Cmn>2\u003C/mn>\n            \u003C/msup>\n        \u003C/mrow>\n        \u003Cmo>=\u003C/mo>\n        \u003Cmsup>\n            \u003Cmi>z\u003C/mi>\n            \u003Cmn>2\u003C/mn>\n        \u003C/msup>\n    \u003C/mrow>\n\u003C/math>\n```\n\n  will render as:\n  > {\u003Cmath>\u003Cmrow>\u003Cmrow>\u003Cmsup>\u003Cmi>x\u003C/mi>\u003Cmn>2\u003C/mn>\u003C/msup>\u003Cmo>+\u003C/mo>\u003Cmsup>\u003Cmi>y\u003C/mi>\u003Cmn>2\u003C/mn>\u003C/msup>\u003C/mrow>\u003Cmo>=\u003C/mo>\u003Cmsup>\u003Cmi>z\u003C/mi>\u003Cmn>2\u003C/mn>\u003C/msup>\u003C/mrow>\u003C/math>}\n\n  6. normal elements: all other [`HTML element`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element)\n\n  - anatomy:\n\n``` html\n  start tag\n      |\n-----------|                                         end tag\n|          |                                             |\n\u003Cp attribute>the quick brown fox jumps over the lazy dog\u003C/p>\n|          |                                             |  |\n|          |                                             |  |\n|          |---------------------------- content --------|  |\n|------------------------------------- element -------------|\n```\n\n    **Note**: The start and end tags of certain normal elements can be omitted\n\n``` html\n\u003Cp attribute/>\n```\n\n    > Omitting an element's start tag in the situations described below does not mean the element is not present; it is implied, but it is still there. For example, an HTML document always has a root html element, even if the string `\u003Chtml>` doesn't appear anywhere in the markup.\n\n``` html {2} /html/#a\n\u003C!DOCTYPE HTML>\n\n  \u003Chead>\n    \u003Ctitle>Hello\u003C/title>\n  \u003C/head>\n  \u003Cbody>\n    \u003Cp>Welcome to this example.\u003C/p>\n  \u003C/body>\n\u003C/html>\n```\n    will render same as\n``` html {2} /html/#a\n\u003C!DOCTYPE HTML>\n\u003Chtml>\n  \u003Chead>\n    \u003Ctitle>Hello\u003C/title>\n  \u003C/head>\n  \u003Cbody>\n    \u003Cp>Welcome to this example.\u003C/p>\n  \u003C/body>\n\u003C/html>\n```\n\n  - **start tag**: marks where the elements begin to take effect. This consists of the name of elements and its attribute (optional).\n\n    Eg: `\u003Cp>` is start tag\n```html /\u003Cp/#a\n\u003Cp style=\"color: red; text-transform: capitalize\">\u003C/p>\n```\n    Read more about start tag format [here](https://html.spec.whatwg.org/multipage/syntax.html#start-tags)\n\n  - **tag attribute**: attributes has a name and a value. Attribute names must consist of more than one character and attribute value is mixture of text and character reference;\n\n    Eg:  `style` is attribute name of element `\u003Cp>` and `\"color: red; text-transform: capitalize\"` is its **double-quoted** value\n```html\n\u003Cp style=\"color: red; text-transform: capitalize\">\u003C/p>\n```\n\n  - **content**: this's content of element. It could contains some other tag inside of it but in this case, it contains text.\n\n    Eg:  `the quick brown fox jumps over the lazy dog` is content of `\u003Cp>`\n```html /the quick brown fox jumps over the lazy dog/#a\n\u003Cp>the quick brown fox jumps over the lazy dog\u003C/p>\n```\n\n  - **end tag**: this marks where elements ends. Not include, fail to provide ending tags at right position might produce strange, unexpected behavior.\n\n    Eg: `\u003C/p>` is start tag\n```html\n\u003Cp style=\"color: red; text-transform: capitalize\">\u003C/p>\n```\n    Read more about end tag format [here](https://html.spec.whatwg.org/multipage/syntax.html#end-tags)\n\n## Doctype\n\n**DOCTYPEs** (`\u003C!doctype html>`) are required for legacy reasons.\nWhen omitted, browsers tend to use a different rendering mode that is incompatible with some specifications.\n\n## Html\n\nAlso referred to as the **_root element_** is the root (top-level element) of an HTML document, all other elements must be descendant of this element.\n\n\u003Cbr />\n\n## Head\n\nthe `\u003Chead>` element is the part of HTML document that does not display through web page.\nIt primarily holds:\n\n- website's metadata - machine readable information:\n  - data of author\n  - browser tab title\n  - website's important description, keywords for other people to lookup using google, bing, duckduckgo,...)\n  - information for machine processing\n- external link to [CSS](https://developer.mozilla.org/en-US/docs/Web/CSS)\n- internal css style\n- web browsers might also use metadata provided in `\u003Chead>` to render HTML documents correctly.\n- ...\n\nHTML5-compliant browsers automatically create a `\u003Chead>` element if its tags are omitted in the markup\n\n\u003Cbr />\n\n## Body\n\nThis's where all fun begin. The `\u003Cbody>` element represent the content of HTML document and there's only one `\u003Cbody>` element in document.\n\nIt's hard to tell what to do with `\u003Cbody>` cause it's really depend on the design and layout of the website, but we have some option for basic use case:\n\n- media element: `\u003Cimg>`, `\u003Cfigure>`, `\u003Csource>`, `\u003Cvideo>`, `\u003Caudio>`, ...\n- paragraph: `\u003Cp>`, `\u003Cblockquote>`, `\u003Cstrong>`, `\u003Cem>`, `\u003Cb>`, `\u003Ci>`, `\u003Cu>`, ...\n- heading: `\u003Ch1>`, `\u003Ch2>`, ..., `\u003Ch6>`\n- table: `\u003Ctable>`, `\u003Cthead>`, `\u003Ctbody>`, `\u003Cth>`, `\u003Ctr>`\n- list: `\u003Col>`, `\u003Cul>`, `\u003Cli>`\n- content division: `\u003Cbr>`, `\u003Chr>`, `\u003Cdiv>`\n- general inline container: `\u003Cspan>`\n- menu: `\u003Cselect>`, `\u003Coption>`\n- hyperlink: `\u003Ca>`\n- user input: `\u003Cinput>`, `\u003Ctextarea>`, `\u003Cdiv contenteditable>\u003C/div>`\n- .....\n\nYou can find much more of HTML elements and its feature [here](https://developer.mozilla.org/en-US/docs/Web/HTML/Element). We have a lot of tags but in real world using, `div`, `span`, `img`, `a`, `video`, `audio`, `input`, `textarea`,... are the lost using tag. Most of the time, we can replace most of the other tag using `div`\n\n\u003Cbr />\n\n## Summary\n\n- Basic format of a HTML file:\n```html\n\u003C!DOCTYPE html> \u003C!-- you don't really need to worry about this tag -->\n\u003Chtml lang=\"en\"> \u003C!-- and this tag -->\n  \u003Chead>\n    \u003C!-- website's metadata, external content -->\n  \u003C/head>\n  \u003Cbody>\n    \u003C!-- this's where we create website content -->\n  \u003C/body>\n\u003C/html>\n```\n- Syntax to write a HTML tag:\n```html\n\u003C!-- normal elements -->\n\u003Celement attribute=\"value\" ...>element content\u003C/element>\n\n\u003C!-- no-ending elements -->\n\u003Celement attribute=\"value\" ... />\n\n\u003C!-- void elements (tags that cannot have any child nodes) -->\n\u003C!--   -->\n\u003Celement attribute=\"value\" ...>\u003C/element>\n```","src/content/blog/web-development/html-introduction.mdx",[81],"../../../assets/blog-placeholder-4.jpg","1ce8b7a875de42d5","web-development/css-introduction",{"id":83,"data":85,"body":89,"filePath":90,"assetImports":91,"digest":92,"deferredRender":68},{"title":86,"description":87,"pubDate":88,"heroImage":77},"Introduction To CSS","Simple introduction to CSS for absolutely beginner",["Date","2022-02-24T17:00:00.000Z"],"# Introduction To CSS\n\n## Goals\nThe following article aims to provide an introduction to CSS by exploring some fundamental concepts.\nWe will examine a CSS code snippet and break down each line to understand its purpose.\n\nAdditionally, we will discuss how we can modify and customize the code to suit our specific needs and use cases.\nBy the end of the article, you will have a solid understanding of the code and be equipped to apply it creatively to your own projects.\nLet's dive in and explore the world of CSS together!\n\n## What is CSS for?\n\nCSS (Cascading Style Sheets) is a language that defines how web documents are presented to end users.\nIt serves the purpose of enhancing the visual appearance of web pages, making them visually appealing, engaging, and easy to read.\nWith CSS, we can create visually captivating designs by defining rules that determine the styles to be applied to specific elements or groups of elements within a document.\nBy using CSS, we have the power to transform plain and dull web pages into visually stunning and aesthetically pleasing experiences for users.\n\n## Starting with some HTML\n```html {5}\n\u003C!doctype html>\n\u003Chtml lang=\"en\">\n  \u003Chead>\u003C/head>\n  \u003Cbody>\n    \u003Cspan>hello world\u003C/span>\n  \u003C/body>\n\u003C/html>\n```\n\nSaying, \"i need the **hello worlds** is in the middle of page, horizontally\", the below rules of style will help me out.\n```css\n```\n```html {11} ins={4-8}\n\u003C!doctype html>\n\u003Chtml lang=\"en\">\n  \u003Chead>\n    \u003Cstyle>\n    span {\n      text-align: center;\n    }\n    \u003C/style>\n  \u003C/head>\n  \u003Cbody>\n    \u003Cspan>hello world\u003C/span>\n  \u003C/body>\n\u003C/html>\n```\n\nCSS can be used for very basic document text styling - changing font style, text color, highlight text,...\nIt can also be used to create complex layouts with animation. We'll explore more and more of CSS later in this series but for now:\n> We use CSS for styling things\n\n## CSS syntax\n\nCSS rules always start with a selector. This's the part of a CSS rule to specify what elements in a document will take rules effects.\n\n```css\n/* \"span\" is a SELECTOR to indicate */\n/* that all \"span\" elements will be styled by the following rules*/\nspan {\n  /* the property \"color\" following by \"red\" value indicate that */\n  /* text inside \"span\" element in the document will have red color */\n  color: red;\n\n  /* we can write as much style inside the bracket \"{ ... }\" as we need */\n  ...;\n}\n```\n\n## Class-based CSS selector\n\nUp until now, we have been applying styles to elements based on their HTML element names.\nThis approach is suitable when we want all elements of the same type to have the same style.\nHowever, in most cases, we need to target specific elements with different styles.\nIn this section, we will explore alternative ways of selecting elements and applying CSS rules to them.\n\n### Basic selectors\n\n```html {5-9}\n\u003C!DOCTYPE html>\n\u003Chtml lang=\"en\">\n  \u003Chead>\u003C/head>\n  \u003Cbody>\n    \u003Cspan class=\"class-a\" id=\"span-a\">hello\u003C/span>\n    \u003Cdiv class=\"class-b\">\n      \u003Cspan class=\"class-b\">my\u003C/span>\n      \u003Cspan class=\"class-a class-b\">world\u003C/span>\n    \u003C/div>\n  \u003C/body>\n\u003C/html>\n```\n\nIt's a good idea not to skip the below section.\nBut to be honest, all you need to know is there are `CSS` selectors look like this:\n- `*`\n- `element`\n- `.class-name`\n- `#element-id`\n- `[attribute]`\n- `A B`\n- `A>B`\n- `A+B`\n- `A~B`\n- `A:\u003C...>`\n- `A::\u003C...>`\n\n**Selector** is vital because it helps us answer the question\n> `how to style specific elements?`.\n\nIt provides the tools to customize the appearance of individual elements on a web page.\n\n\n#### Universal selector:\n- select all elements in document\n- syntax: `*`\n- example:\n```css\n/* will match all elements, which is: `html`, `body`, `span`, `div` */\n* { property: value }\n```\n\n#### Type selector:\n- select all elements match node name in selector\n- syntax: `elementname`\n- example:\n```css\n/* will match all `span` */\nspan { property: value }\n/* will match all `div` */\ndiv { property: value }\n```\n\n#### Class selector:\n- select all elements that have given `class` attribute in selector\n- syntax: `.classname`\n- example:\n```css\n/* will match all element has class includes \"class-a\" */\n.class-a { property: value }\n/* will match all element has class includes \"class-b\" */\n.class-b { property: value }\n/* will match all element has class includes \"class-a\" AND \"class-b\" */\n.class-a.class-b { property: value }\n```\n\n#### Id selector:\n- select all elements that have given `id` attribute in selector\n- syntax: `#id`\n- example:\n```css\n/* will match all elements has id: `span-a` */\n#span-a { property: value }\n```\n\n#### Attribute selector:\n- select all elements that have the given attribute.\n- syntax: `[attr]` `[attr=value]` `[attr~=value]` `[attr|=value]` `[attr^=value]` `[attr$=value]`\n- example:\n```css\n/* will match all element has class includes \"class-a\" */\n[class=\"class-a\"] { property: value }\n/* this's same as */\n.class-a { property: value }\n\n/* will match first `span` */\n[id=\"span-a\"] { property: value }\n/* this's same as */\n#span-a { property: value }\n```\n\n#### Grouping selectors\n\nThis's the same as [basic selector](#basic-selectors) but we separate them using `,` to group the same set of elements that take rules style\n\n```css\ndiv,\n.class-b {\n  /* all `div` in documents and also all element has class \"class-b\" */\n  /* will have text color of red */\n  color: red;\n}\n```\n\n### Combinator\n\n```html\n\u003C!DOCTYPE html>\n\u003Chtml lang=\"en\">\n  \u003Chead>\u003C/head>\n  \u003Cbody>\n    \u003Cspan class=\"class-a\" id=\"span-a\">hello\u003C/span>\n    \u003C!-- 1 -->\n    \u003Cdiv class=\"class-b\">\n      \u003Cspan class=\"class-b\">my\u003C/span>\n      \u003C!-- 2 -->\n      \u003Cspan class=\"class-a class-b\">world\u003C/span>\n      \u003C!-- 3 -->\n      \u003Cp>\n        \u003Cspan>here\u003C/span>\n        \u003C!-- 4 -->\n      \u003C/p>\n      \u003Cspan>and here\u003C/span>\n      \u003C!-- 5 -->\n    \u003C/div>\n  \u003C/body>\n\u003C/html>\n```\n\n#### Descendant combinator:\n- select nodes that are descendants of the first elements\n- syntax: `A B` where `A`, `B` are [basic selector](#basic-selector)\n- example: - `div span { ... }` will match all `span` that are child of `div`, which is 2nd and 3rd `span` - `div .class-a {}` will match `span` that has class `class-a` and the span must be child of a `div`\n  , which is 3rd `span` - we can apply all kind of [basic selector](#basic-selector) into descendant combinator to make CSS work the way we need.\n\n#### Child combinator:\n- selects nodes that are direct children of the first element\n- syntax: `A > B`\n- example:\n  - `div > span` will match all `span` that are **direct** child of a `div`, which is 2nd, 3rd and 5th `span`\n    the 4th `span` will not match because it is direct child of a `p`\n\n#### General sibling combinator\n- select nodes that are siblings of the first element that are share same direct parent\n- syntax: `A ~ B`\n- example:\n  `span ~ span` will match 3rd, 5th `span`, the 4th `span` will not be match because it doesn't share same parent\n  `span ~ p` will match `p`\n\n#### Adjacent sibling combinator\n- same as general sibling combinator but the siblings must be immediately follows the first element\n- syntax: `A + B`\n- example:\n  `span + span` will match 3rd `span`, the 5th `span` will not match because it's not immediately after the 2nd `span`\n  `span + p` will match `p`\n\n### Pseudo selector\n\n#### Pseudo classes\n\n- select elements based on state information\n- syntax: `A:pseudo { ... }`\n- example: `a:visited` will match all `a` elements that have been visited by the user.\n\n#### Pseudo elements\n- select a specific part of the selected element\n- syntax: `A::pseudo { ... }`\n- example: `div span:first-child` will match 2nd `span`\n\n## Example\n\nMost of the time, we use selector to answer the question \"how to style that specific element\", this section is for demonstrating this.\n\nTo understand why elements have certain styles, you can use browser dev tools.\nThese tools allow you to inspect and analyze web pages, helping you understand the styling applied to different elements.\nCheck out this [article](https://developer.chrome.com/docs/devtools/css/) to learn more about inspecting web pages and gaining insights into their styling.\n\n\n```html\n\u003Cdiv class=\"first\">\n  \u003Cspan class=\"a\">first span\u003C/span>\n  \u003Cspan class=\"b\">second span\u003C/span>\n\u003C/div>\n\u003Cdiv class=\"second\">\n  \u003Cspan class=\"a b c\" id=\"c\">\n    third span\n  \u003C/span>\n  \u003Cspan class=\"d\">fourth span\u003C/span>\n\u003C/div>\n```\n\n```css\n* {\n\t/* select all element */\n\tfont-size: 18px;\n}\n\nspan {\n\t/* select all span */\n\tcolor: cyan;\n\tpadding: 10px;\n\tdisplay: inline-block;\n\tbackground-color: lightgrey;\n}\n\ndiv {\n\t/* select all div */\n\tbackground-color: grey;\n\tpadding: 10px;\n\tmargin-top: 10px;\n}\n\ndiv > span {\n\t/* select all span has parent of div */\n\tfont-weight: bold;\n\tfont-size: 22px;\n}\n\n.a {\n\t/* select all element has class \"a\" ( class=\"a\" ) */\n\tbackground-color: blue;\n}\n\n.b {\n\t/* select all element has class \"b\" */\n\tcolor: white;\n}\n\n.c,\n.d {\n\t/* select all element has class \"c\" or \"d\" */\n\ttext-decoration: underline;\n}\n\n#c {\n\t/* select all element has id \"e\" */\n\tbackground-color: yellow;\n\tcolor: blue;\n}\n\n```\n\nIf I need to style the `third span`, there are several ways to do it:\n\n- by class:\n  - either `.a`, `.b`, `.c` work but `.a`, `.b` will all so style the \"first span\" and \"second span\"\n  - `.a.b.c` is better idea\n- by id: `#c` will work\n- by position: `div:nth-child(2) span:nth-child(1)`, learn more about [:nth-child](https://developer.mozilla.org/en-US/docs/Web/CSS/:nth-child)\n- or all of above:\n```css\n.a.b,\n.a.b.c,\n#c,\n.c#c,\ndiv:nth-child(2) span:nth-child(1) {\n}\n```","src/content/blog/web-development/css-introduction.mdx",[81],"6654020b7410d33b","web-development/js-introduction",{"id":93,"data":95,"body":99,"filePath":100,"assetImports":101,"digest":102,"deferredRender":68},{"title":96,"description":97,"pubDate":98,"heroImage":77},"Introduction To Javascript","Simple introduction to Javascript for absolutely beginner",["Date","2022-02-28T17:00:00.000Z"],"# Introduction To Javascript\n\n## Goals\nThe goal of this post is to introduce JavaScript to absolute beginners in a simple and easy-to-understand way.\nBy the end of this post, you will have a clear idea of what JavaScript is, why it is important for building websites, and what it can do.\n\n## Target audience\nThis post is specifically for:\n- Absolute beginners who have no prior knowledge or understanding of JavaScript or programming in general.\n- Who are curious about JavaScript and want to learn more about it.\n\n## What JavaScript is\nJavaScript is a flexible scripting or programming language that allows you to add advanced features to web pages.\nWhen a web page goes beyond showing static information and starts offering dynamic elements like timely updates,\ninteractive maps, animated graphics, or scrolling video jukeboxes, JavaScript is usually involved.\nIt's the language that enables these interactive and engaging experiences on the web.\n\nThis entire web page is typically static, meaning that the content remains fixed and doesn't change.\nHowever, there is one exception: the \u003Cspan style=\"color: red\">red button\u003C/span> displayed below. You can click on the button, and its text color will dynamically change from \u003Cspan style=\"color: red\">red\u003C/span> to \u003Cspan style=\"color: #19B5FE\">blue\u003C/span>. Go ahead and give it a try!\n\n``` html\n\u003Cbutton\n  style=\"color: red\"\n  onclick=\"this.style.color='blue';\"\n  >Welcome to blog: Introduction to Javascript\u003C/button>\n```\n\n## What JavaScript can do or why we need it?\nJavaScript is incredibly important for frontend web development because it helps us create amazing user experiences. Here's why we need JavaScript:\n\n### Making Websites Interactive:\nJavaScript allows us to add interactive elements to our websites.\nWe can create forms that validate user input, sliders that let users adjust settings, and dropdown menus that respond to their selections.\nThese interactive features make websites more user-friendly and engaging.\n\n\n### Updating Content in Real-Time:\nWith JavaScript, we can update parts of a web page without refreshing the whole thing.\nThis means we can display live data, like stock prices or social media feeds, that automatically update as new information comes in.\nIt makes our websites feel dynamic and up-to-date.\n\n\n### Changing Web Page Elements:\nJavaScript gives us the power to modify the elements on a web page.\nWe can change the content, style, and behavior of different parts of the page based on user interactions or other factors.\nThis helps us create websites that respond to user actions and provide a personalized experience.\n\n\n### Responding to User Actions:\nWhen users click a button, type in a form, or scroll a page, JavaScript lets us respond to those actions.\nWe can write code that executes specific tasks or displays certain content when users interact with our website.\nIt adds interactivity and makes our websites more intuitive.\n\n> All of the above examples demonstrate how JavaScript responds when a user clicks on a specific button.\nThese examples are associated with an onclick event, which triggers the JavaScript code when the button is clicked.\n\n### Adding Animations and Effects:\nJavaScript enables us to create eye-catching animations and visual effects.\nWe can make elements fade in and out, slide across the screen, or respond to mouse movements.\nThese animations and effects make our websites more visually appealing and memorable.\n\n### Compatibility with Different Browsers:\nJavaScript works seamlessly across different web browsers, ensuring that our code functions properly no matter which browser our users prefer.\nIt's a reliable language that allows us to build websites that work consistently for everyone.\n\n## Example\n\n``` javascript\n/// find, in the current web page browser, the first `\u003Cbutton>` tag\nconst para = document.querySelector(\"button\");\n\n// when user click it, then trigger function `updateName`\npara.addEventListener(\"click\", updateName);\n\nfunction updateName() {\n  // open a browser default prompt dialog, to ask for name\n  const name = prompt(\"Enter a new name\");\n\n  // then change the text content of the `\u003Cbutton>` with new-entered name\n  para.textContent = `Player 1: ${name}`;\n}\n```\n\n## Sumary\nTo summarize, JavaScript is crucial for frontend web development as it enables us to create interactive and dynamic websites.\nIt allows us to add interactive features, update content in real-time, modify web page elements, respond to user actions, create animations and effects, and ensure compatibility across different web browsers.\n\nIt's important to note that while JavaScript strives for compatibility, there can be slight variations in how different web browsers handle JavaScript code or support specific features.\nThis means that sometimes things may not work exactly the same way in every situation or browser.\n\nNevertheless, JavaScript remains a powerful tool that empowers us to build engaging, user-friendly, and visually impressive websites.\nBy following best practices, staying informed about browser-specific behaviors, and applying appropriate techniques for cross-browser compatibility, we can overcome these challenges and create compelling web experiences that work seamlessly for the majority of users.","src/content/blog/web-development/js-introduction.mdx",[81],"541e368e0b035f8e","web-development/css-layout-introduction",{"id":103,"data":105,"body":109,"filePath":110,"assetImports":111,"digest":112,"deferredRender":68},{"title":106,"description":107,"pubDate":108,"heroImage":77},"Introduction To CSS Layout","Simple introduction to CSS Layout for absolutely beginner",["Date","2022-02-26T17:00:00.000Z"],"# Introduction To CSS Layout\n\n## Goals\n\nThese articles will guide you through the essential layout tools and techniques offered by CSS.\nYou will learn how to effectively structure and arrange elements on a webpage using:\nmodern layout tools like `flexbox` and CSS `grid`, and some of the `legacy techniques` you might still want to know about\n\n## Target audience\n\nThis post is specifically for:\n\n- Have basic familiarity with HTML, if you don't checkout this [post](/blogs/introduction-to-web-development/1686525497/)\n- Understand CSS fundamentals, as discussed in [Introduction to CSS](/blogs/introduction-to-css/1646522406/)\n\n## CSS Layout\n\n### Normal flow\n\nNormal flow refers to the default layout behavior of a browser when rendering HTML pages without any explicit layout instructions.\nIn this context, elements are displayed one after another, vertically, in the order they appear in the HTML document.\n\nLet's examine a simple HTML example to illustrate normal flow:\n\n```html\n\u003Ch1>Welcome to Hytorium\u003C/h1>\n\u003Cp>This is a paragraph of text.\u003C/p>\n\u003Cimg src=\"image.jpg\" alt=\"Example image\" />\n\u003Cul>\n  \u003Cli>Item 1\u003C/li>\n  \u003Cli>Item 2\u003C/li>\n  \u003Cli>Item 3\u003C/li>\n\u003C/ul>\n\u003Cp>Another paragraph of text.\u003C/p>\n```\n\n### The display property\n\nThe CSS `display` property is important for controlling how elements appear on a webpage.\nIn fact, `display` is on of the most use property.\nIt lets you choose the layout style for an element.\nBy using different values for display, you can change how elements behave and create different layouts.\n\nIn addition to changing the default appearance of elements from `block` to `inline` and vice versa, there are more advanced layout methods available using the display property.\nTwo important values for layout are `display: flex` and `display: grid`.\n\nWhen using these 2 layout, you can create more complex and flexible layouts.\nHowever, while provide powerful tools for arranging elements on a webpage, these values require additional properties to be set in order to achieve the desired layout.\n\n### Flexbox\n\nFlexbox is a powerful and versatile tool for web developers that makes it easier to create responsive layouts.\nIt allows us to easily manipulate the size, position, and order of elements on a web page, making it the perfect choice for creating complex layouts with minimal effort\n\n#### Use `display: flex`\n\nTo use `flexbox`, we can apply `display: flex` to the parent element that contains the elements we want to arrange.\nThis will make all its direct children become `flex items`, allowing us to control their layout using flexbox properties.\n\n```html\n\u003Cdiv class=\"wrapper\">\n  \u003C!-- Flex container -->\n  \u003Cdiv class=\"box1\">One\u003C/div>\n  \u003C!-- Flex item -->\n  \u003Cdiv class=\"box2\">Two\u003C/div>\n  \u003C!-- Flex item -->\n  \u003Cdiv class=\"box3\">Three\u003C/div>\n  \u003C!-- Flex item -->\n\u003C/div>\n```\n\n```css\n.wrapper {\n  display: flex;\n}\n```\n\n#### Setting flex properties for flex items\n\nIn addition to properties for flex containers, there are specific properties for flex items.\nThese properties control how items flex, allowing them to expand or contract based on available space.\nBy applying these properties to individual items, you have more control over their behavior within the flex layout.\n\n```html\n\u003Cdiv class=\"wrapper\">\n  \u003C!-- Flex container -->\n  \u003Cdiv class=\"box1\">One\u003C/div>\n  \u003C!-- Flex item -->\n  \u003Cdiv class=\"box2\">Two\u003C/div>\n  \u003C!-- Flex item -->\n  \u003Cdiv class=\"box3\">Three\u003C/div>\n  \u003C!-- Flex item -->\n\u003C/div>\n```\n\n```css\n.wrapper {\n  display: flex;\n}\n.wrapper > div {\n  flex: 1;\n}\n```\n\nThe CSS rule flex: 1 applied to the child elements indicates that they should grow and shrink equally to fill the available space within the flex container.\nThis is achieved by distributing the available space evenly among the flex items using the flex-grow and flex-shrink properties.\n\n### Grid\n\nCSS Grid Layout is a powerful tool for creating flexible and responsive layouts in CSS.\nIt introduces a two-dimensional grid system that allows you to define columns and rows, and place elements onto the grid.\nBy using the display: grid property on a container element, all its direct children become grid items.\n\nHere's a simple example of using CSS Grid Layout:\n\n```html\n\u003Cdiv class=\"wrapper\">\n  \u003Cdiv class=\"box1\">One\u003C/div>\n  \u003Cdiv class=\"box2\">Two\u003C/div>\n  \u003Cdiv class=\"box3\">Three\u003C/div>\n\u003C/div>\n```\n\n```css\n.wrapper {\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-template-rows: 100px 100px;\n  gap: 10px;\n}\n\n.box1 {\n  grid-column: 2 / 4;\n  grid-row: 1;\n}\n\n.box2 {\n  grid-column: 1;\n  grid-row: 1 / 3;\n}\n\n.box3 {\n  grid-row: 2;\n  grid-column: 3;\n}\n```\n\n### Floats The float property in CSS allows you to position and format elements\n\nby floating them to the left or right side of their container. This property is\ncommonly used to create layouts where text and inline elements wrap around a\nfloated element.\n\nWhen an element is floated, it is removed from the normal flow of the page but still remains a part of the flow.\nThe computed value of the float property can be one of the following:\n\n- `left`: The element floats on the left side of its containing block.\n- `right`: The element floats on the right side of its containing block.\n- `none`: The element does not float and is displayed where it occurs in the text.\n- `inline-start`: The element floats on the start side of its containing block, which is the left side with left-to-right scripts and the right side with right-to-left scripts.\n- `inline-end`: The element floats on the end side of its containing block, which is the right side with left-to-right scripts and the left side with right-to-left scripts.\n\nThe float property can be applied to all elements, but it has no effect if the value of the display property is set to none. The default value is none, and the property is not inherited [1].\n\n#### Common Use Cases of Float Property\n\nThe float property is commonly used in web design to achieve various layout effects. Here are some common use cases:\n\n##### 1. Wrapping text around images:\n\nBy floating an image to the left or right, you can make the text flow around it, creating a visually appealing layout.\n\n```css\nimg {\n  float: left; /* or float: right; */\n}\n```\n\n##### 2. Creating multi-column layouts:\n\nFloats can be used to create multiple columns of content by floating block-level elements next to each other.\n\n```css\n.column {\n  float: left;\n  width: 50%; /* Adjust the width as needed */\n}\n```\n\n##### 3. Clearing floats:\n\nWhen floating elements, it's important to clear the floats to prevent layout issues.\nThe clear property is used to specify whether an element should be positioned below the floating elements.\n\nAn element that has the clear property set on it will not move up adjacent to the float like the float desires, but will move itself down past the float.\n\n```css\n.clearfix::after {\n  content: \"\";\n  display: table;\n  clear: both;\n}\n```\n\nThe float property is a powerful tool for creating flexible and dynamic layouts in CSS.\nHowever, it's worth noting that with the advent of CSS Grid and Flexbox, the use of float for layout purposes has been largely replaced by these newer layout techniques.\n\n### Positioning\n\nPositioning allows you to move an element from its normal position in the page layout to a different location.\nIt's not used for creating the main structure of a page, but rather for managing and adjusting the position of specific items on the page.\n\nHowever, positioning can be helpful in achieving specific layout patterns using the position property.\nIt also helps in understanding how elements behave in the normal flow and how to move an item out of that flow.\n\nThere are five types of positioning you should know about:\n\n- `Static positioning`:\n  This is the default position for every element.\n  It means the element is placed in its [normal position](#normal-flow) in the document flow without any special adjustments.\n\n- `Relative positioning`:\n  With relative positioning, you can modify the position of an element on the page `relative to its normal flow position`.\n  You can also make it overlap other elements on the page.\n\n- `Absolute positioning`:\n  Absolute positioning removes an element from the normal layout flow and positions it relative to:\n  - Its closest positioned ancestor\n  - The `\u003Chtml>` element if no other ancestors are positioned.\n    This is useful for creating complex layout effects, like tabbed boxes or sliding information panels.\n\n- `Fixed positioning`:\n  Similar to absolute positioning, fixed positioning removes an element from the normal flow but positions it relative to the browser viewport.\n  This is often used for creating elements like a navigation menu that remains in place while scrolling.\n\n- `Sticky positioning`:\n  Sticky positioning is a newer method that initially behaves like relative positioning.\n  However, when the element reaches a defined offset from the viewport, it starts behaving like fixed positioning.\n  It's commonly used for elements that stick to a specific position until a certain point.\n\nThese different positioning techniques give you more control over the placement of elements on a web page, allowing you to create interesting layouts and effects.\n\n### Summary\n\nThis article has provided a brief summary of all the layout technologies you should know about.\nRead on for more information on each individual technology!","src/content/blog/web-development/css-layout-introduction.mdx",[81],"eec423ad9d3287d7","vod-simulate-live-hls",{"id":113,"data":115,"body":119,"filePath":120,"assetImports":121,"digest":122,"deferredRender":68},{"title":116,"description":117,"pubDate":118,"heroImage":77},"Simulate-Live from HLS VOD","This article explores how to transform an HLS Video on Demand (VOD) stream into a simulated live experience.",["Date","2025-02-06T17:00:00.000Z"],"import { Image } from 'astro:assets';\nimport ImgDebugLoadPlaylist from \"./debug-load-playlist.png\"\n\n# Simulate-Live from HLS VOD\n\n## Description\n\nThis article explores how to transform an HLS Video on Demand (VOD) stream into a simulated live experience. By modifying the HLS manifest dynamically, we can ensure that users joining the stream see content at a real-time-simulated position rather than from the beginning. We discuss the problem, the idea behind the solution, debugging to find the right approach, step-by-step implementation, and the final JavaScript code that makes it possible.\n\n## Problem\n\n> How to simulate a live broadcast experience from a VOD source\n\nHLS (HTTP Live Streaming) is widely used for delivering video content over the internet.\nHowever, many videos are available as Video on Demand (VOD), meaning users can start, pause, and seek through the content at any time.\n\nWhile this flexibility is useful, there are scenarios where we need to simulate a live broadcast experience from a VOD source. This means that when a user joins, they should see the video at the point where a real-time stream would have been if it were truly live.\n\n\n## Find the Solution\n### What HLS is?\nHLS (HTTP Live Streaming) is a streaming technology developed by Apple, that allows video files to be broken into smaller chunks and delivered over HTTP.\nThis makes streaming more efficient and adaptable to different network conditions. The core of HLS is the M3U8 playlist file and its segments file.\n\n### Building blocks of HLS\nHLS (HTTP Live Streaming) operates using two main types of M3U8 playlists: main playlist and media playlist\n#### Main playlist\nA main playlist is an M3U8 file that tells the HLS player which video quality options are available.\nIt contains multiple variants of the same video at different bitrates or resolutions, allowing the player to adapt to network conditions dynamically.\n\n```\n#EXTM3U\n#EXT-X-STREAM-INF:BANDWIDTH=1280000,AVERAGE-BANDWIDTH=1000000\nhttp://example.com/low.m3u8\n#EXT-X-STREAM-INF:BANDWIDTH=2560000,AVERAGE-BANDWIDTH=2000000\nhttp://example.com/mid.m3u8\n#EXT-X-STREAM-INF:BANDWIDTH=7680000,AVERAGE-BANDWIDTH=6000000\nhttp://example.com/hi.m3u8\n#EXT-X-STREAM-INF:BANDWIDTH=65000,CODECS=\"mp4a.40.5\"\nhttp://example.com/audio-only.m3u8\n```\n\nExample of main playlist contains:\n- Low quality (e.g., 480p, lower bitrate)\n```\n#EXT-X-STREAM-INF:BANDWIDTH=1280000,AVERAGE-BANDWIDTH=1000000\nhttp://example.com/low.m3u8\n```\n- Medium quality (e.g., 720p, moderate bitrate)\n```\n#EXT-X-STREAM-INF:BANDWIDTH=2560000,AVERAGE-BANDWIDTH=2000000\nhttp://example.com/mid.m3u8\n```\n- High quality (e.g., 1080p, high bitrate)\n```\n#EXT-X-STREAM-INF:BANDWIDTH=7680000,AVERAGE-BANDWIDTH=6000000\nhttp://example.com/hi.m3u8\n```\n- Audio-only option\n```\n#EXT-X-STREAM-INF:BANDWIDTH=65000,CODECS=\"mp4a.40.5\"\nhttp://example.com/audio-only.m3u8\n```\n\n#### Media (Level) playlist\nA Media Playlist (or Level Playlist) contains the actual video segments (chunks of video) that are played sequentially.\n\nTypes of Media Playlists:\n- VOD (Video on Demand): Fixed playlist with an `#EXT-X-ENDLIST` tag.\n```\n#EXTM3U\n#EXT-X-PLAYLIST-TYPE:VOD\n#EXT-X-TARGETDURATION:10\n#EXT-X-VERSION:4\n#EXT-X-MEDIA-SEQUENCE:0\n#EXTINF:10.0,\nhttp://example.com/movie1/fileSequenceA.ts\n#EXTINF:10.0,\nhttp://example.com/movie1/fileSequenceB.ts\n#EXTINF:10.0,\nhttp://example.com/movie1/fileSequenceC.ts\n#EXTINF:9.0,\nhttp://example.com/movie1/fileSequenceD.ts\n#EXT-X-ENDLIST\n```\n- Live Streaming: Updates dynamically with `#EXT-X-MEDIA-SEQUENCE`\n```\n#EXTM3U\n#EXT-X-TARGETDURATION:10\n#EXT-X-VERSION:4\n#EXT-X-MEDIA-SEQUENCE:1\n#EXTINF:10.0,\nfileSequence1.ts\n#EXTINF:10.0,\nfileSequence2.ts\n#EXTINF:10.0,\nfileSequence3.ts\n#EXTINF:10.0,\nfileSequence4.ts\n#EXTINF:10.0,\nfileSequence5.ts\n```\n\n### How Hls work\n\nHLS works by breaking video content into small chunks (segments) and providing an M3U8 playlist file that lists these segments.\nThe player continuously fetches and plays these segments, enabling adaptive bitrate streaming. An M3U8 playlist file may include:\n\n- `#EXTM3U` – Indicates that this is an M3U8 playlist.\n\n- `#EXT-X-TARGETDURATION` – The maximum segment duration.\n\n- `#EXTINF` – Specifies the duration of each segment.\n\n- `#EXT-X-ENDLIST` – Marks the end of a VOD playlist.\n\nExample of m3u8 for VOD\n```\n#EXTM3U\n#EXT-X-VERSION:3\n#EXT-X-PLAYLIST-TYPE:VOD\n#EXT-X-TARGETDURATION:10\n#EXTINF:10,\nsegment1.ts\n#EXTINF:10,\nsegment2.ts\n#EXTINF:10,\nsegment3.ts\n#EXT-X-ENDLIST\n```\n\n## How HLS Live Stream Works\n\nUnlike VOD, live HLS streams update continuously as new segments are generated. Key differences include:\n\nNo `#EXT-X-ENDLIST`, allowing the playlist to grow dynamically.\n\nThe presence of `#EXT-X-MEDIA-SEQUENCE`, indicating the sequence number of the first segment in the playlist.\n\nThe playlist only contains a moving window of the latest segments, simulating real-time playback.\n\nExample of m3u8 for live stream at\n- timestamp `t1`\n  ```\n  #EXTM3U\n  #EXT-X-VERSION:3\n  #EXT-X-TARGETDURATION:10\n  #EXT-X-MEDIA-SEQUENCE:1000\n  #EXTINF:10,\n  segment1000.ts\n  #EXTINF:10,\n  segment1001.ts\n  #EXTINF:10,\n  segment1002.ts\n  ```\n\n- timestamp `t2`\n  ```diff\n   #EXTM3U\n   #EXT-X-VERSION:3\n   #EXT-X-TARGETDURATION:10\n  -#EXT-X-MEDIA-SEQUENCE:1000\n  +#EXT-X-MEDIA-SEQUENCE:1001\n  -#EXTINF:10,\n  -segment1000.ts\n   #EXTINF:10,\n   segment1001.ts\n   #EXTINF:10,\n   segment1002.ts\n  +#EXTINF:10,\n  +segment1003.ts\n  ```\n\n\n### Idea\n\nTo achieve a simulated live experience from an HLS VOD stream, we can manipulate the playlist (.m3u8) dynamically. The goal is to:\n\n- Remove indicators that define the stream as VOD.\n- Trim the playlist so that playback starts at a calculated point, mimicking a real-time progression.\n\nThere many player that could be used to play HLS stream, but in this article, we will use [**HLS.js**](https://github.com/video-dev/hls.js), a JavaScript library that implements an HLS client.\nCheckout its [**reference player**](https://hlsjs.video-dev.org/demo/).\nAlso, the version of HLS.js that we will use is [`1.5.20`](https://github.com/video-dev/hls.js/tree/v1.5.20) at the time write this article.\n\n## Debugging\n- We first need to know how HLS.js works and how it loads the playlist. Look at the image below we could see that HLS.js use [`playlist-loader`](https://github.com/video-dev/hls.js/blob/v1.5.20/src/loader/playlist-loader.ts#L66) to handle it.\n\n\u003CImage src={ImgDebugLoadPlaylist} alt=\"debug load playlist in Chrome Devtools\" />\n\nFurther more debug, we could see that HLS.js use `loader` to load the segment and we can config the loader via `config.pLoader` or `config.loader` in the HLS.js config.\n[reference to source](https://github.com/video-dev/hls.js/blob/v1.5.20/src/loader/playlist-loader.ts#L103-L126)\n```ts\n  /**\n   * Returns defaults or configured loader-type overloads (pLoader and loader config params)\n   */\n  private createInternalLoader(\n    context: PlaylistLoaderContext,\n  ): Loader\u003CLoaderContext> {\n    const config = this.hls.config;\n    const PLoader = config.pLoader;\n    const Loader = config.loader;\n    const InternalLoader = PLoader || Loader;\n    const loader = new InternalLoader(config) as Loader\u003CPlaylistLoaderContext>;\n\n    this.loaders[context.type] = loader;\n    return loader;\n  }\n\n  private getInternalLoader(\n    context: PlaylistLoaderContext,\n  ): Loader\u003CLoaderContext> | undefined {\n    return this.loaders[context.type];\n  }\n\n  private resetInternalLoader(contextType): void {\n    if (this.loaders[contextType]) {\n      delete this.loaders[contextType];\n    }\n  }\n```\n\nAt this port, we gonna use `config.pLoader` to config the loader to load the playlist and modify the playlist before it's loaded.\nCheckout [`config.pLoader`](https://github.com/video-dev/hls.js/blob/v1.5.20/docs/API.md#ploader) document, we could see that the document already prepare this for us.\nAnd all we have to do it copy it and modify the `process` function to fit our need.\n\n```js\n// special playlist post processing function\nfunction process(playlist) {\n  if (playlist.includes('#EXT-X-STREAM-INF')) {\n    // we only process media playlist\n    return playlist\n  }\n\n    // Remove VOD tag indicator\n    return playlist\n      .replace('#EXT-X-PLAYLIST-TYPE:VOD\\n', '')\n      .replace('#EXT-X-ENDLIST\\n', '');\n}\n\nclass pLoader extends Hls.DefaultConfig.loader {\n  constructor(config) {\n    super(config);\n    var load = this.load.bind(this);\n    this.load = function (context, config, callbacks) {\n      if (context.type == 'manifest') {\n        var onSuccess = callbacks.onSuccess;\n        callbacks.onSuccess = function (response, stats, context) {\n          response.data = process(response.data);\n          onSuccess(response, stats, context);\n        };\n      }\n      load(context, config, callbacks);\n    };\n  }\n}\n\nvar hls = new Hls({\n  pLoader: pLoader, // to create make sure simulate live work\n  liveDurationInfinity: true, // to remove the duration in the video tag\n  startPosition: 0, // start playing position\n});\n```\n\n## Demo\n\u003Ciframe src=\"/demo/vod-simulate-live-hls\" style=\"width: 100%; height: 350px\">\u003C/iframe>\n\nAvailable demo at [here](/demo/vod-simulate-live-hls)\n\n## Conclusion\n\nBy intercepting and modifying the HLS manifest, we can create a simulated live experience for VOD content. This approach ensures users experience the video as if it were a live stream, enhancing engagement for specific use cases like scheduled replays or simulated broadcasts. Using a custom HLS.js loader, we can dynamically adjust playback behavior while keeping the infrastructure simple and scalable.","src/content/blog/vod-simulate-live-hls/index.mdx",[81],"720f8dca630458ca","web-development",{"id":123,"data":125,"body":130,"filePath":131,"assetImports":132,"digest":134,"deferredRender":68},{"title":126,"description":127,"pubDate":128,"heroImage":129},"Introduction To Web Development","Simple introduction to FrontEnd web development for absolutely beginner",["Date","2022-02-18T17:00:00.000Z"],"__ASTRO_IMAGE_../../../assets/blog-placeholder-5.jpg","# Introduction To FrontEnd Web Development\n\n## Series\n\n1. [Introduction to HTML](/blog/web-development/html-introduction)\n2. [Introduction to CSS](/blog/web-development/css-introduction/)\n3. [Introduction to CSS Layout](/blog/web-development/css-layout-introduction/)\n4. [Introduction to Javascript](/blog/web-development/js-introduction/)\n\n## Introduction\n\nFront-end web development involves working with core languages, `HTML` (HyperText Markup Language), `CSS` (Cascading Style Sheets), and `JavaScript`,\nto create websites and web applications that users can directly interact with.\n\nTo get started with Front-end web development or creating a simple website, you need to:\n\n- Understand the basics of HTML to structure the content of your web pages.\n- Use CSS to style and format the elements on your web pages.\n- Incorporate JavaScript to add interactivity and dynamic behavior to your website.\n\n## TLDR\n\nYou need to learn [HTML](/blogs/introduction-to-html/1645744806/), [CSS](/blogs/introduction-to-css/1646522406/), [JavaScript](/blogs/introduction-to-javascript/1686525497)\n\n## Goals\n\nThis post was create to help you to have:\n\n- A basic understanding of what website development look like\n- How can you create yourself simple website\n\n## Target audience\n\nThose who:\n\n- Don't know or have no idea what web development look like\n- Absolutely beginner and want to start develop some thing\n\n## Web and HTML\n\nThe **world wide web**, commonly known as the web, has revolutionized the way we access and share information.\nIt has become an integral part of our daily lives, connecting people, businesses, and resources from all corners of the globe.\n\nAt the core of the web's functionality lies a fundamental language known as `HTML` (`H`yper`T`ext `M`arkup `L`anguage),\nwhich serves as the backbone for creating and structuring web pages.\nIn this introduction, we will explore what the web is, delve into the details of HTML, and understand how these two concepts relate to each other.\n\nHTML is the standard markup language used for creating web pages.\nIt provides a set of tags, elements, and attributes that define the structure and content of a webpage.\nWith HTML, web developers can specify the layout, formatting, and placement of text, images, videos, links, and other multimedia elements.\nBy utilizing a simple and intuitive syntax, HTML allows developers to create structured documents that can be interpreted and rendered correctly by web browsers.\n\n---\n\n### Example 1\n\nSaying i want a website has simple text with some style kind of like \u003Cspan style=\"color: red\">red\u003C/span> color text\nand if i **click** on that text it turn from \u003Cspan style=\"color: red\">red\u003C/span> into \u003Cspan style=\"color: blue\">blue\u003C/span>\nThis's what i will do\n\n```html\n\u003C!DOCTYPE html>\n\u003Chtml lang=\"en\">\n  \u003Chead>\u003C/head>\n  \u003Cbody>\n    \u003Cspan style=\"color: red\" onclick=\"this.style.color='blue'\"\n      >hello world\u003C/span\n    >\n  \u003C/body>\n\u003C/html>\n```\nResult\n\u003Cdiv style=\"background: white\">\n  \u003Cspan style=\"color: red\" onclick=\"this.style.color='blue'\">\n    hello world\n  \u003C/span>\n\u003C/div>\n\n---\n\nDon't worry, for now, we only put our attention on the below highlight line.\n\n```html {5}\n\u003C!doctype html>\n\u003Chtml lang=\"en\">\n  \u003Chead>\u003C/head>\n  \u003Cbody>\n    \u003Cspan style=\"color: red\" onclick=\"this.style.color='blue'\">hello world\u003C/span>\n  \u003C/body>\n\u003C/html>\n```\n\nBasically, above line saying:\n\n- create me a [tag](#tag) with content of `hello world`:\n\n```html\n\u003Cspan ...>hello world\u003C/span>\n```\n\n- when click\n\n```html\n\u003Cspan onclick=\"...\">hello world\u003C/span>\n```\n\n- change color style of this tag to \u003Cspan style=\"color: blue\">blue\u003C/span>\n\n```js\n// find in this tag\n// |\n// |   the appearance setting\n// |   |\n// |   |    of text color\n// |   |    |\n// |   |    |   and change this to 'blue'\n// |   |    |   |\nthis.style.color = \"blue\";\n```\n\n### Tag\n\n> Think of `tag` like a container, you will put your stuff into it, whatever it's. Whether it's a `text`, `image`, `video`, ...\n> and you can direct styling using [CSS](https://developer.mozilla.org/en-US/docs/Web/CSS), control its behavior with specific kind of input ([click](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/click), [double click](https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event), [scroll](https://developer.mozilla.org/en-US/docs/Web/API/Document/scroll_event) your mouse...), change it content, ... with help of [JS](https://developer.mozilla.org/en-US/docs/Web/JavaScript#for_complete_beginners)\n\nJust think, in general, `span` is a box where `\u003Cspan>` is the lid of the box and `\u003C/span>` is the bottom of it.\nWe put stuff into box through the lid which is `\u003Cspan>` tag.\n\nSo tag's format will look like:\n\n```html\n\u003C!-- normal elements -->\n\u003Celement attribute=\"value\" ...>element content\u003C/element>\n\n\u003C!-- no-ending elements -->\n\u003Celement attribute=\"value\" ... />\n\n\u003C!-- void elements (tags that cannot have any child nodes) -->\n\u003C!--   -->\n\u003Celement attribute=\"value\" ...>\u003C/element>\n\n\u003C!-- a tag has text color of red -->\n\u003Cspan style=\"color: red\">...\u003C/span>\n```\n\n> `\u003Cspan style=\"\">` mean \"i want to change how this `span` tag look like\"\n> and it is `color: red`\n\nThis's **inline style**. There're **external**, **internal** and **inline** style for you to know.\nWe can put many, many style on this inline style with format `style=\"property: value; property: value; ...\"`\n\n### CSS\n\nCSS is a language for specifying how documents are presented to endpoint users, it allows us to create good-looking, less-boring, readable web pages.\nWe can define rules specifying groups of styles that should be applied to particular elements or groups of elements on documents.\n\nIn the above example we use **inline style** (`style=\"color: red\"`) to define how the `span` tag look.\nIn this case is to change the text color to red.\nbut CSS can do more, it allows us to change: background color, width,height of tag, create a round corners style, make the tag has shadow,\nalter the font, color, size, and spacing of your content, split it into multiple columns, or add animations and other decorative features.\n\nOf course, CSS can do even more than we can imagine. And it's really depend on your experience in CSS.\nCheckout this website, [animista.net](https://animista.net/) is a place where you can play with a collection of pre-made css animations, tweak them and get only those you will actually use.\n\n\n### JavaScript\n\nJavaScript is a programming language that adds interactivity and functionality to websites.\nIt's a versatile and widely used language that allows you to create dynamic web pages and build web applications.\nIf you're an absolute beginner to programming, JavaScript is a great language to start with and you don't need to have any prior programming experience to get started.\nYou can write JavaScript code directly in your HTML files or in separate JavaScript files and link them to your web pages.\n\nLearn more about JavaScript in [javascript.info](https://javascript.info/)\n\n### Why are there so many HTML elements(tags) ?\n\nSo...back to the example above. If the `span` thing can do all the job, why waste time writing down all other (_non-highlight lines down below_) things?\n\n```html {5}\n\u003C!doctype html>\n\u003Chtml lang=\"en\">\n  \u003Chead>\u003C/head>\n  \u003Cbody>\n    \u003Cspan style=\"color: red\" onclick=\"this.style.color='blue'\">hello world\u003C/span>\n  \u003C/body>\n\u003C/html>\n```\n\n**Answer:** yes, you can do it, believe me go ahead to [example](#example-1) and delete all other line\n. So it look like this and of course it's still work\n\n```html\n\u003Cspan style=\"color: red\" onclick=\"this.style.color='blue'\">hello world\u003C/span>\n```\n\nIt look like waste, redundancy code but trust me we'll need it for later development\n\n## Development\n\nIn simple words, creating a website is like creating an HTML `*.html` file where you write code to structure the content of a web page.\nOnce you have written the HTML code, save it with the `*.html` extension.\nNext, open the saved file using your web browser.\nThe browser will then parse the HTML file and convert it into a tree-like structure, which represents the structure and layout of the web page.\nFinally, the browser displays the formatted content of the web page based on the HTML code you wrote.\n\nOf course, real-world development is much more than just to create a `*.html`.\nIn fact, real-world development, websites are typically hosted on servers and accessed over the internet rather than being local files on your computer\nBut for now, `*.html` file is enough for us to understand big-image of front web development\n\nSo instead of manual create `*.html` files. We can use online tools to do the same things:\n\n- [codepen](https://codepen.io/)\n- [jsbin](https://jsbin.com/)\n- [stackblitz](https://stackblitz.com/)\n\nWill do the jobs, just paste some html code and start explore\n\n### Where to start?\n\n#### Online development\n\n[codepen](https://codepen.io/),[jsbin](https://jsbin.com/), [stackblitz](https://stackblitz.com/), ...\n\n#### Local development\n\n##### Raw file html\n\n- Create file `index.html`\n- Paste below code and save it\n\n```html\n\u003C!DOCTYPE html>\n\u003Chtml lang=\"en\">\n  \u003Chead>\u003C/head>\n  \u003Cbody>\n    \u003Cspan style=\"color: red\" onclick=\"this.style.color='blue'\">hello world\u003C/span>\n  \u003C/body>\n\u003C/html>\n```\n\n- Open the file on any browser\n\n##### Localhost server\n\nFor me, one fast, easy way is to start localhost, is to use extension [Web Server for Chrome](https://chrome.google.com/webstore/detail/web-server-for-chrome/ofhbbkphhbklhfoeikjpcbhemlocgigb)\n\n- Install, open `Web Server for Chrome`\n- Choose folder where you save your `index.html` file\n- Check switch button so `Web Server: STARTED`\n- Open your Web Server Url print on screen, eg: [http://127.0.0.1:3000](http://127.0.0.1:3000)\n- There we go\n\n##### Browser's inspector\n\n- [browser's inspect](https://www.browserstack.com/guide/inspect-element-in-chrome)\n- [view page resourse](https://www.lifewire.com/view-html-source-in-chrome-3466725)\n  - If you're using Safari you need [Enabling Web Inspector](https://developer.apple.com/library/archive/documentation/NetworkingInternetWeb/Conceptual/Web_Inspector_Tutorial/EnableWebInspector/EnableWebInspector.html) first.\n\n### What's next\n\n- Read my blog about [Introduction to HTML](/blogs/introduction-to-html/1645744806/)\n- The purpose of this article is introduce you to basic idea of web development. We'll later explore more about [HTML](https://developer.mozilla.org/en-US/docs/Web/HTML), [CSS](https://developer.mozilla.org/en-US/docs/Web/CSS), [JS](https://developer.mozilla.org/en-US/docs/Web/JavaScript#for_complete_beginners), ...\n- You should explore more about [HTML elements](https://developer.mozilla.org/en-US/docs/Web/HTML/Element)","src/content/blog/web-development/index.mdx",[133],"../../../assets/blog-placeholder-5.jpg","24302af85ae75c8f","javascript/1-js-runtime",{"id":135,"data":137,"body":141,"filePath":142,"assetImports":143,"digest":144,"deferredRender":68},{"title":138,"description":139,"pubDate":140,"heroImage":129,"useMermaid":68,"hidden":68},"[Javascript] Runtime","An introduction to Javascript Runtime",["Date","2025-09-23T17:00:00.000Z"],"# An introduction to Javascript Runtime\n\nJavascript Runtime refers to the environment where Javascript code is executed, encompassing various components that work together to enable functionality.\nCentral to this is the Javascript Engine, which interprets and executes code\nBut the engine alone isn't enough. In order to work properly, we need Environment APIs ( Web API for browser and NodeJs API for server) to essential APIs for interacting with the browser or server.\n\nUnderstanding the Javascript runtime is crucial for optimizing application performance, leveraging asynchronous programming effectively, and ensuring seamless interactions between code and the environment, thereby enhancing the overall user experience.\n\n\n### Javascript Engine\nThe Javascript Engine is a critical component of the Javascript runtime, consisting of several core elements that work together to execute code effectively. The main components include the **Call Stack**, **Heap**, **Parser**, **Interpreter**, and **Compiler**, which collectively facilitate the execution of Javascript applications.\n\n1. **Call Stack:** The Call Stack is where function calls are managed during execution. It follows a Last In, First Out (LIFO) structure, meaning that the most recently called function is executed first. Each function invocation creates a new frame in the Call Stack, which contains the execution context, local variables, and the return address.\n\n2. **Heap:** The heap is a memory pool used for storing objects and data. Unlike the structured nature of the Call Stack, the heap allows for dynamic memory allocation, making it suitable for storing variable-sized data like objects and arrays.\n\n#### Flow of Javascript Code Execution\n\n\u003Cpre class=\"mermaid\">\ngraph LR\n    js_code[\"JS Code\"]\n\n    subgraph js_engine[\"Javascript Engine\"]\n        parser[\"Parser\"]\n        ast([\"AST\"])\n        interpreter[\"Interpreter\"]\n        machinecode([\"Machine Code\"])\n        jit[\"JIT Compiler\"]\n        optimized_machinecode[\"Optimized Machine Code\"]\n        callstack[\"Call Stack\"]\n        heap[\"Heap\"]\n\n        parser --> ast\n        ast --> interpreter\n        interpreter --> machinecode\n        machinecode -- traditional flow --> callstack\n        machinecode -- mordern optimization --> jit\n        jit --> optimized_machinecode\n        optimized_machinecode --> callstack\n        callstack \\\u003C.-> heap\n    end\n\n    js_code --> parser\n\u003C/pre>\n\nThe **Parser** is the first component of the Javascript Engine that processes the raw source code.\n\n\u003Cpre class=\"mermaid\">\ngraph LR\n    js_code[\"JS Code\"] --> parser[\"Parser\"]\n    parser --> ast([\"AST\"])\n\u003C/pre>\n\nDuring this stage, the parser reads the Javascript code and checks it for syntax errors. If the code is syntactically correct, the parser converts it into an **Abstract Syntax Tree (AST)**.\n\nThe **AST** is a structured representation of the code that highlights the hierarchical relationships between various elements, such as functions, variables, and expressions.\nThe AST enables the engine to understand the code's intent and flow without concerning itself with syntactical details.\nIt provides a simplified view of the code, which the interpreter will use for execution.\n\nBelow is the AST of `const a = 'hello world'`. You can tryout and explore AST with this [playground](https://astexplorer.net/)\n```json\n{\n  \"type\": \"Program\",\n  \"start\": 0,\n  \"end\": 23,\n  \"body\": [\n    {\n      \"type\": \"VariableDeclaration\",\n      \"start\": 0,\n      \"end\": 23,\n      \"declarations\": [\n        {\n          \"type\": \"VariableDeclarator\",\n          \"start\": 6,\n          \"end\": 23,\n          \"id\": {\n            \"type\": \"Identifier\",\n            \"start\": 6,\n            \"end\": 7,\n            \"name\": \"a\"\n          },\n          \"init\": {\n            \"type\": \"Literal\",\n            \"start\": 10,\n            \"end\": 23,\n            \"value\": \"hello world\",\n            \"raw\": \"'hello world'\"\n          }\n        }\n      ],\n      \"kind\": \"const\"\n    }\n  ],\n  \"sourceType\": \"module\"\n}\n```\n\nOnce the AST is generated, the **Interpreter** takes over to execute the code.\n\n\u003Cpre class=\"mermaid\">\ngraph LR\n    ast([\"AST\"]) --> interpreter[\"Interpreter\"]\n    interpreter --> machine_code[\"Intermediate Machine Code\"]\n    machine_code --> execution[\"Execute Machine Code\"]\n\u003C/pre>\n\nThe interpreter translates the AST into intermediate **machine code**, which is a lower-level representation of the code that the computer's processor can execute.\nThis process involves traversing the AST and invoking operations as dictated by its structure.\nWhile the interpreter allows quick execution of code, it may not apply optimizations that enhance overall performance. Consequently, the code runs as is, without taking full advantage of optimization opportunities inherent to the underlying machine.\n\nTo address the performance limitations of the interpreter, modern Javascript Engines implement a **Just-In-Time (JIT) Compiler**.\n\n\u003Cpre class=\"mermaid\">\ngraph LR\n    machine_code[\"Machine Code\"] --> jit[\"JIT Compiler\"]\n    jit --> optimized_code[\"Optimized Machine Code\"]\n\n    optimized_code --> callstack[\"Call Stack\"]\n    optimized_code -->|Store| cache[\"Code Cache\"]\n\u003C/pre>\n\nJIT compilation occurs during the execution of the program, converting frequently executed sections of code (often referred to as \"hot\" code) into optimized machine code.\nThis optimized code can be stored and reused for subsequent calls, significantly reducing execution time compared to interpreted code. By combining interpretation with JIT compilation, engines strike a balance between fast startup times and efficient long-term execution.\n\nThe **Call Stack** is a last-in, first-out (LIFO) data structure that tracks active function calls and manages execution contexts.\nWhen a function is invoked, a new frame is added to the top of the Call Stack, containing information about the function's execution, such as parameters, local variables, and the return address.\nAs functions complete execution, their frames are popped off the stack. This mechanism ensures that control returns to the correct location in the code after a function finishes.\nThe Call Stack interacts with the heap when functions need to access objects or data stored there during execution.\n\nUnlike the structured Call Stack, the heap is an unstructured space where objects, arrays, and data structures are stored.\nWhen the engine needs to allocate memory for complex or variable-sized data, it utilizes the heap. Efficient memory management in the heap enables Javascript to handle the dynamic nature of web applications, which often require frequent creation and deletion of objects.\n\n\n### Example and Illustration\n\nConsider the following Javascript code:\n\n```javascript\nfunction greet(name) {\n    return `Hello, ${name}!`;\n}\n\nfunction welcome() {\n    const message = greet('Alice');\n    console.log(message);\n}\n\nwelcome();\n```\n\n**Execution Flow:**\n\n1. **Call to `welcome()`:** A frame for `welcome` is added to the Call Stack.\n2. **Call to `greet('Alice')`:** Within `welcome`, `greet` is called, pushing a new frame for `greet` onto the stack.\n3. **Return from `greet`:** After constructing the greeting, control returns to `welcome`, and its frame is executed to log the message.\n4. **End of Execution:** Once `welcome` completes, it is popped from the stack, marking the end of the program.\n\n\u003Cpre class=\"mermaid\">\nflowchart TD\n    A[Start] --> B[\"Call welcome()\"]\n    B --> C[\"Call greet('Alice')\"]\n    C --> D[\"Return 'Hello, Alice!'\"]\n    D --> E[\"Log message\"]\n    E --> F[\"End\"]\n\u003C/pre>\n\nIn this illustration, the flow of execution and how the Call Stack manages function calls and returns is represented clearly. Understanding the role of the Call Stack and the overall process of the Javascript Engine is essential for building efficient applications and optimizing performance in Javascript.\n\n\n\n### JS Environment\nThe runtime environment provides built-in APIs and functionalities that allow Javascript to interact with the browser or server environment, handling tasks like DOM manipulation, making network requests, and accessing other system capabilities.\n\n#### Browser Environment\nWhen users interact with the UI, the Javascript Engine often needs to handle user interaction requests via Web APIs, such as:\n   - **DOM Manipulation:** Javascript can access and modify the HTML structure and styles of a webpage, allowing for dynamic content updates and interactive user experiences.\n   - **Event Handling:** Javascript can listen for user events (like clicks, keyboard presses, and mouse movements) and execute corresponding functions in response.\n   - **Making Network Requests (AJAX):** Javascript can asynchronously fetch data from a server without reloading the webpage, enhancing user experience through dynamic content updates.\n\nUnfortunately, the Javascript Engine itself does not inherently recognize these interactions.\nInstead, it provides a full set of data types, operators, objects, and functions specified in the ECMAScript standard. These features are ultimately utilized by the Web APIs to facilitate dynamic and interactive experiences within the browser.\n\n\n#### Server Environment\nIn a server environment, such as Node.js, Javascript also interacts with various server-specific functionalities to handle incoming requests and perform backend operations.\nWhen users initiate actions that require server interaction, the Javascript Engine processes these requests through APIs available in the server environment (like file system access and database connections).\nJust like in the browser context, the Javascript Engine relies on the same standard ECMAScript constructs to enable effective execution of tasks and resource management by server APIs.\n\n#### Callback Queue (Tasks, Microtasks, and Event Loop)\n\nJavascript is designed to function in a single-threaded environment, meaning only one task can be executed at a time. This design choice simplifies programming by eliminating concurrency issues; however, it also presents challenges when dealing with asynchronous operations, such as user interactions, network requests, and timers. To handle these operations without blocking the main thread, Javascript employs a queuing mechanism that uses **Tasks** and **Microtasks**.\n\n##### Tasks\n\n**Tasks** (also known as macrotasks) represent long-running operations or those involving I/O requests, such as:\n- Functions executed by `setTimeout`\n- Network requests (e.g., fetching data from an API)\n- Event callbacks triggered by user interactions (clicks, keyboard inputs)\n\nThese Tasks are placed in the **Task Queue**, managed by the Event Loop, which ensures that the Javascript engine remains responsive to user interactions. Because tasks must be executed in the main thread, it is crucial that each task completes its execution in sequence. Once the Call Stack is empty, the Event Loop pulls the next Task from the queue and pushes it onto the Call Stack for execution.\n\n\u003Cpre class=\"mermaid\">\ngraph TD\n    task_queue[\"Task Queue\"] --> eventloop[\"Event Loop\"]\n    eventloop --> callstack[\"Call Stack\"]\n    callstack -->|Execute| finished_task[\"Finished Task\"]\n\u003C/pre>\n\n##### Microtasks\n\n**Microtasks** are special tasks designed to run immediately after the currently executing task, before any subsequent tasks from the Task Queue. Common examples of Microtasks include:\n- Promise resolution callbacks\n- MutationObserver callbacks\n\nMicrotasks are placed in a separate **Microtask Queue**, which has a higher priority than the Task Queue. This means that after the main task finishes execution, the Event Loop will first complete all Microtasks in the Microtask Queue before moving on to the next Task. This prioritization allows for quick responses to promises and ensures updates occur quickly, maintaining a smooth user experience.\n\n\u003Cpre class=\"mermaid\">\ngraph TD\n    microtask_queue[\"Microtask Queue\"] --> eventloop[\"Event Loop\"]\n    eventloop --> callstack[\"Call Stack\"]\n    callstack -->|Execute| finished_microtask[\"Finished Microtask\"]\n\u003C/pre>\n\n##### Event Loop\n\nThe **Event Loop** is the mechanism that governs the execution of tasks and microtasks. It continuously checks the status of the Call Stack and the Task Queues, ensuring that execution flows smoothly and efficiently:\n\n1. The Event Loop verifies if the Call Stack is empty.\n2. If the stack is empty, it processes all pending Microtasks in the Microtask Queue first.\n3. Once all Microtasks have been executed, the Event Loop retrieves the next Task from the Task Queue and places it on the Call Stack for execution.\n\nThis cyclical checking process allows Javascript to manage asynchronous operations seamlessly, ensuring that the application remains responsive even during heavy execution loads.\n\n### Example\n\n\n```js\nfunction fetchUserData() {\n    console.log(\"Fetching user data...\");\n\n    // Simulate a network request to fetch user data from an API (Microtask)\n    const userRequest = fetch('https://jsonplaceholder.typicode.com/users/1')\n        .then(response => {\n            if (!response.ok) {\n                throw new Error('Network response was not ok');\n            }\n            return response.json();\n        })\n        .then(userData => {\n            // Use a microtask to process the fetched user data\n            processUserData(userData);\n        })\n        .catch(error => {\n            // Use a microtask to log exception\n            console.error(\"Error fetching user data:\", error);\n        });\n}\n\nfunction processUserData(userData) {\n    console.log(\"Processing user data...\");\n    // Simulate processing of user data\n    console.log(`User Name: ${userData.name}`);\n    console.log(`Email: ${userData.email}`);\n}\n\nconsole.log(\"Start\");\nfetchUserData();\nconsole.log(\"End\");\n```","src/content/blog/javascript/1-js-runtime.mdx",[133],"13e066a433384451","javascript",{"id":145,"data":147,"body":150,"filePath":151,"assetImports":152,"digest":153,"deferredRender":68},{"title":148,"description":148,"pubDate":149,"heroImage":129},"An(other in deep) introduction to Javascript",["Date","2025-09-23T17:00:00.000Z"],"This's not an introduction for absolute beginner, though they'll benefit from it.\nFor\n\n## Introduction\nPerformance directly affects user experience: slow sites frustrate users, fast ones feel smooth and responsive. To improve performance, developers must understand not only how Javascript (JS) runs but also how browsers render pages.\n\nBoth JS execution and key parts of the rendering pipeline run on the browser’s **main thread**, which means heavy JS task can block rendering and vice versa. If heavy JS blocks it, rendering and user interaction are delayed. Understanding both sides explains why some apps feel “laggy” and others stay smooth.\n\n---\n## Series\n\n1. [JavaScript Runtime](/blog/javascript/1-js-runtime)\n2. [Browser Rendering Pipeline](/blog/javascript/2-browser-rendering-pipeline/)\n3. [Connecting the Dots](/blog/javascript/3-connect-the-dots/)\n4. [Real-world Examples](/blog/javascript/4-examples/)","src/content/blog/javascript/index.mdx",[133],"9bbbc9bab71a2090","sad-servers/the-command-line-murders",{"id":154,"data":156,"body":160,"filePath":161,"assetImports":162,"digest":163,"deferredRender":68},{"title":157,"description":158,"pubDate":159,"heroImage":77},"[Sad Servers] The Command Line Murders","The Command Line Murders",["Date","2024-02-21T17:00:00.000Z"],"# The Command Line Murders\nWhat is the best way to invest in learning new Linux-based commands and having fun at the same time?\nIntroduce '[The Command Line Murders](https://github.com/veltman/clmystery)', an interactive game designed to teach and reinforce command line concepts and Linux navigation.\n\nUnlike any other game we used to play, 'The Command Line Murders' is entirely command-line-based.\nIn this game, players must navigate and complete challenges using Linux-based commands\n\n\n## Scenario\n>There has been a murder in Terminal City, and the TCPD (Terminal City Police Department) needs your >help.\n>Your task is to utilize your skills to solve the murder by following the provided hints and instructions\n\n## Instructions\n### Download source\nGo to the repo [The Command Line Murders](https://github.com/veltman/clmystery), clone it or [download it as a zip file](https://github.com/veltman/clmystery/archive/master.zip)\n### Repo directory explaination\n```\n.\n└── root/\n    ├── mystery/\n    │   ├── interviews/\n    │   ├── memberships/\n    │   ├── streets/\n    │   ├── people\n    │   ├── vehicles\n    │   └── crimescene\n    ├── LICENSE.md\n    ├── README.md\n    ├── cheatsheet.md\n    ├── cheatsheet.pdf\n    ├── encoded\n    ├── hint1\n    ├── hint2\n    ├── ...\n    ├── hint8\n    ├── instructions\n    └── solution\n```\n- `hintX`: hese files contain hints and instructions on how to uncover the identity of the whodunit.\n- `cheatsheet.md|pdf`: This file provides Linux skills that can assist you in extracting information from the given pieces of evidence.\n- `mystery`: This directory holds all the necessary information to identify the perpetrator.\n\nTo increase the difficulty of manual discovery through file reading, some additional information has been added as noise data.\n\n### Assumed Prerequisites\nYou should be comfortable working within the `terminal` or have a basic understanding of what a `terminal` is.\nIf you're unfamiliar, don't worry—the [`cheatsheet`](https://github.com/veltman/clmystery/blob/master/cheatsheet.md) provided by the game's author will guide you through\n\n### Skill Development Zone\n#### Finding clues, aka Searching\nThe `grep` command  will let you find words or patterns in files.\nThink of it as a `google search` but for `terminal`\n```bash\n# search `evident` in `file.txt`\n$ grep \"evident\" file.txt\n# this is the result that has evident in side it\n\n\n# search `evident` in all file that has extension *.txt\n$ grep \"evident\" *.txt\n\n# search `evident` in all file that has extension *.txt\n# show 5 line AFTER the line that has the `evident` words\n# in total we would have 6 line\n$ grep \"evident\" *.txt -A 5\n\n# search `evident` in all file that has extension *.txt\n# show 5 line BEFORE the line that has the `evident` words\n# in total we would have 6 line\n$ grep \"evident\" *.txt -B 5\n\n# search `evident` in all file that has extension *.txt\n# but instead of printing out the line that has `evident`, print out the filenames\n$ grep \"evident\" *.txt -l\n```\n\n#### Print out file(s) content\nThe `cat` command will let you print out the entire contents of the files in terminal.\nThink of it like an `PDF reader` but instead of application we use `terminal`.\n```bash\n$ cat file.txt\n# NAME    GENDER    ADDRESS\n# John    M         123 Main St\n# Emily   F         456 Oak Ave\n# Mike    M         789 Elm St\n# Sarah   F         101 Pine Rd\n# Alex    M         222 Birch Ln\n```\n#### List all files in a directory\nThe `ls` will help us on this, think of it like a `File Explorer`\n\n### Investigation\nAll of the below commands, assumes you `cd` to the `root` dir\n#### Reading hint\n```bash\n$ cat hint1\n# Try poking around what\\'s in a file by using the head\n#\n#   head -n 20 people\n#\n# This will show you the first 20 lines of the 'people' file.\n```\nThe `hint1` instructs us to check the information in the file named `people` located inside the `mystery` subdirectory\n\n```bash\n$ head -n 20 ./mystery/people\n# ***************\n# To go to the street someone lives on, use the file\n# for that street name in the 'streets' subdirectory.\n# To knock on their door and investigate, read the line number\n# they live on from the file.  If a line looks like gibberish, you're at the wrong house.\n# ***************\n#\n# NAME    GENDER    AGE    ADDRESS\n# Alicia Fuentes    F    48    Walton Street, line 433\n# Jo-Ting Losev     F    46    Hemenway Street, line 390\n# Elena Edmonds     F    58    Elmwood Avenue, line 123\n# Naydene Cabral    F    46    Winthrop Street, line 454\n# Dato Rosengren    M    22    Mystic Street, line 477\n# Fernanda Serrano  F    37    Redlands Road, line 392\n# Emiliano Wenk     M    90    Paulding Street, line 490\n# Larry Lapin       M    71    Atwill Road, line 298\n# Jakub Gondos      M    61    Mitchell Street, line 187\n# Derek Kazanin     M    55    Tennis Road, line 440\n# Jens Tuimalealiifano    M    83    Rockwood Street, line 205\n# Nikola Kadhi      M    75    Glenville Avenue, line 226\n```\n\nThe explaination instructs us on how to correctly find someone's house to ask for information.\nFor example, to find `Nikola Kadhi`\n```bash\n$ awk 'FNR == 226' ./mystery/streets/Glenville_Avenue\n# influentially arrogant magnetos equipped\n```\nUnfortunally, the information looks like gibberish, meaning we in the wrong house, and asking wrong person\n\nLet's look for another hint\n```bash\n$ cat hint2\n# Try using grep to search for the clues in the crimescene file:\n#\n#   grep \"CLUE\" crimescene\n\n$ grep \"CLUE\" crimescene\n# CLUE: Footage from an ATM security camera is blurry but shows that the perpetrator is a tall male, at least 6'.\n# CLUE: Found a wallet believed to belong to the killer: no ID, just loose change, and membership cards for AAA, Delta SkyMiles, the local library, and the Museum of Bash History. The cards are totally untraceable and have no name, for some reason.\n# CLUE: Questioned the barista at the local coffee shop. He said a woman left right before they heard the shots. The name on her latte was Annabel, she had blond spiky hair and a New Zealand accent.\n```\n\n#### Finding suspect with clue\n- CLUE: Footage from an ATM security camera is blurry but shows that the perpetrator is a `tall male`, at least `6'`.\n  - so the suspect should be a `male`, with `6'` tall at least\n  - recall [hint1, hint2](#reading-hint) on how to find some one's house\n\n- CLUE: Found a wallet believed to belong to the killer: no ID, just loose change, and membership cards for AAA, Delta SkyMiles, the local library, and the Museum of Bash History. The cards are totally untraceable and have no name, for some reason.\n  - so the killer has membership of\n    - AAA\n    - Delta SkyMiles\n    - the local library\n    - the Museum of Bash History\n  - recall [directory explaination](#repo-directory-explaination), we have a directory named 'memberships'\n\n- CLUE: Questioned the barista at the local coffee shop. He said a woman left right before they heard the shots. The name on her latte was Annabel, she had blond spiky hair and a New Zealand accent.\n  - so there's a witness name `Annabel`, with spiky hair and New Zealand accent\n  - recall [hint1, hint2](#reading-hint) on how to find some one's house with just their name\n\n\nThe first two clue has vas information to search, let's find `Annabel` and ask for infomation\n```bash\n# find all people has name `Annabel`\n$ grep 'Annabel' ./mystery/people\n# Annabel Sun    F    26    Hart Place, line 40\n# Oluwasegun Annabel    M    37    Mattapan Street, line 173\n# Annabel Church    F    38    Buckingham Place, line 179\n# Annabel Fuglsang    M    40    Haley Street, line 176\n\n# or even better\n$ grep 'Annabel' ./mystery/people | grep 'F\\s'\n# Annabel Sun    F    26    Hart Place, line 40\n# Annabel Church F    38    Buckingham Place, line 179\n```\nThe `|` in this case called `pipe`. For this pacticular situation, this mean apply `grep 'F\\s'` on the result of `grep 'Annabel' ./mystery/people`.\nWhich mean search for those line has `F` follow by a space (`\\s`) in\n```\n# Annabel Sun    F    26    Hart Place, line 40\n# Oluwasegun Annabel    M    37    Mattapan Street, line 173\n# Annabel Church    F    38    Buckingham Place, line 179\n# Annabel Fuglsang    M    40    Haley Street, line 176\n```\n\nLet's us ask them, but first we had to find their house\n```bash\n$ awk 'FNR == 40' ./mystery/streets/Hart_Place\n# SEE INTERVIEW #47246024\n\n$ awk 'FNR == 179' ./mystery/streets/Buckingham_Place\n# SEE INTERVIEW #699607\n```\nRecall [directory explaination](#repo-directory-explaination), we have a directory named 'interviews'\n```bash\n$ ls ./mystery/interviews\n# interview-000296   interview-13768464 interview-2415821  interview-325611   interview-4335306  interview-555536   interview-6884359  interview-7959148  interview-91673757\n# .....\n```\nSo this directory contains the interview of police with someone. Let's us find those 2 interview from `Annabel`\n\n```bash\n$ cat ./mystery/interviews/interview-47246024\n# Ms. Sun has brown hair and is not from New Zealand.  Not the witness from the cafe.\n\ncat ./mystery/interviews/interview-699607\n# Interviewed Ms. Church at 2:04 pm.  Witness stated that she did not see anyone she could identify as the shooter, that she ran away as soon as the shots were fired.\n#\n# However, she reports seeing the car that fled the scene.  Describes it as a blue Honda, with a license plate that starts with \"L337\" and ends with \"9\"\n```\nHah, got'cha. So we now have to find the owner of a `blue Honda` with `plate that starts with \"L337\" and ends with \"9\"`.\nWe could look at the [vehicles](#repo-directory-explaination) file\n\n```bash\n$ head -n 20 ./mystery/vehicles\n# ***************\n# Vehicle and owner information from the Terminal City Department of Motor Vehicles\n# ***************\n#\n# License Plate T3YUHF6\n# Make: Toyota\n# Color: Yellow\n# Owner: Jianbo Megannem\n# Height: 5'6\"\n# Weight: 246 lbs\n#\n# License Plate EZ21ECE\n# Make: BMW\n# Color: Gold\n# Owner: Norbert Feldwehr\n# Height: 5'3\"\n# Weight: 205 lbs\n#\n# License Plate CQN2TJE\n# Make: Mazda\n```\nSo now, all we have to do is to search in this file to find to find the car.\nFirst, we should narrow down the car by plate number\n```bash\n$ grep ./mystery/vehicles -e 'L337.*9$'\n# License Plate L337ZR9\n# License Plate L337P89\n# License Plate L337GX9\n# License Plate L337QE9\n# License Plate L337GB9\n# License Plate L337OI9\n# License Plate L337X19\n# License Plate L337539\n# License Plate L3373U9\n# License Plate L337369\n# License Plate L337DV9\n# License Plate L3375A9\n# License Plate L337WR9\n```\n`-e 'L337.*9$'` part, mean to find in pattern, the plate should match\n  - match `L337`\n  - match any things (`.*`)\n  - match `9`\n  - and end `$`\nBut by doing this, we also lose other infomation, we need a little bit of change\n```bash\n$ grep ./mystery/vehicles -e 'L337.*9$' -A 4\n# License Plate L337ZR9\n# Make: Honda\n# Color: Red\n# Owner: Katie Park\n# Height: 6'2\"\n# --\n# ...\n# --\n# License Plate L337WR9\n# Make: Honda\n# Color: Blue\n# Owner: Jacqui Maher\n# Height: 6'2\"\n```\n`-A 4` is to show 4 line after the result, recall [grep](#finding-clues-aka-searching).\nThis's great cause we could use this result to `grep` using `pipe`\n```bash\n# finding honda vehicle\n# =========\n# -i mean to search 'honda' with case insensitive\n# meaning the line has 'honda', or `Honda` or HoNdA` will also count\n$ grep ./mystery/vehicles  -e 'L337.*9$' -A 4 | grep -i 'honda' -A 3\n# Make: Honda\n# Color: Red\n# Owner: Katie Park\n# Height: 6'2\"\n# --\n# ...\n# --\n# Make: Honda\n# Color: Blue\n# Owner: Jacqui Maher\n# Height: 6'2\"\n\n# finding blue honda\n# =========\n$ grep ./mystery/vehicles  -e 'L337.*9$' -A 4 | grep -i 'honda' -A 3 | grep -i 'blue' -A 2\n# Color: Blue\n# Owner: Erika Owens\n# Height: 6'5\"\n# --\n# ...\n# --\n# Color: Blue\n# Owner: Jacqui Maher\n# Height: 6'2\"\n\n# finding blue honda owner has at least 6' height\n# =========\n# -B 1 mean show 1 line Before the result\n$ grep ./mystery/vehicles  -e 'L337.*9$' -A 4 | grep -i 'honda' -A 3 | grep -i 'blue' -A 2 | grep \"6'\" -B 1\n# Owner: Erika Owens\n# Height: 6'5\"\n# --\n# Owner: Joe Germuska\n# Height: 6'2\"\n# --\n# Owner: Jeremy Bowers\n# Height: 6'1\"\n# --\n# Owner: Jacqui Maher\n# Height: 6'2\"\n\n# get the owner name\n# =========\n$ grep ./mystery/vehicles  -e 'L337.*9$' -A 4 | grep -i 'honda' -A 3 | grep -i 'blue' -A 2 | grep \"6'\" -B 1 | grep 'Owner'\n# Owner: Erika Owens\n# Owner: Joe Germuska\n# Owner: Jeremy Bowers\n# Owner: Jacqui Maher\n\n# extra step to get the name only by remove 'Owner: '\n$ grep ./mystery/vehicles  -e 'L337.*9$' -A 4 | grep -i 'honda' -A 3 | grep -i 'blue' -A 2 | grep \"6'\" -B 1 | grep 'Owner' | awk '{sub($1 FS, \"\"); print}'\n# Erika Owens\n# Joe Germuska\n# Jeremy Bowers\n# Jacqui Maher\n```\n\nGreat, we could use this name to find address in the `people` files\n```bash\n$ grep 'Erika Owens' ./mystery/people\nErika Owens\tF\t56\tTrapelo Street, line 98\n```\n\nOr we could use pipe `|` to apply search for each line of result\n```bash\n$ grep ./mystery/vehicles  -e 'L337.*9$' -A 4 | grep -i 'honda' -A 3 | grep -i 'blue' -A 2 | grep \"6'\" -B 1 | grep 'Owner' | awk '{sub($1 FS, \"\"); print}' | xargs -I {} sh -c 'grep \"{}\" ./mystery/people'\n# Erika Owens    F    56    Trapelo Street, line 98\n# Joe Germuska   M    65    Plainfield Street, line 275\n# Jeremy Bowers  M    34    Dunstable Road, line 284\n# Jacqui Maher   F    40    Andover Road, line 224\n`xargs -I {} sh -c 'grep \"{}\" ./mystery/people'`:\n  - `xargs -I {} sh -c`: for each line of result we excute a shell command\n  - `grep \"{}\" ./mystery/people`: replace each line of result to \"{}\"\n  - together: search each line of result in file `./mystery/people`\n\n\n$ grep ./mystery/vehicles  -e 'L337.*9$' -A 4 | grep -i 'honda' -A 3 | grep -i 'blue' -A 2 | grep \"6'\" -B 1 | grep 'Owner' | awk '{sub($1 FS, \"\"); print}' | xargs -I {} sh -c 'grep \"{}\" ./mystery/people' | grep 'M\\s'\n# Joe Germuska    M    65    Plainfield Street, line 275\n# Jeremy Bowers   M    34    Dunstable Road, line 284\n```\n\n```bash\n$ awk 'FNR == 275' ./mystery/streets/Plainfield_Street\n# SEE INTERVIEW #29741223\n\n$ cat ./mystery/interviews/interview-29741223\n# Should not be considered a suspect, has no SkyMiles membership and has never been a member of the Museum of Bash History.\n\n$ awk 'FNR == 284' ./mystery/streets/Dunstable_Road\n# SEE INTERVIEW #9620713\n\n$ cat ./mystery/interviews/interview-9620713\nHome appears to be empty, no answer at the door.\n\nAfter questioning neighbors, appears that the occupant may have left for a trip recently.\n\nConsidered a suspect until proven otherwise, but would have to eliminate other suspects to confirm.\n```\n\nFor now `Jeremy Bowers` highly match the suspect description:\n  - Male\n  - 6' at least (6'1\")\n  - owner of a `blue Honda` with plate `L3375A9`\nWhich match the [CLUE](#finding-clues-aka-searching) 1 and 3\nTo make sure he is the killer. Let use [CLUE 2](#finding-clues-aka-searching)\n```\nCLUE: Found a wallet believed to belong to the killer: no ID, just loose change, and membership cards for AAA, Delta SkyMiles, the local library, and the Museum of Bash History. The cards are totally untraceable and have no name, for some reason.\n```\n\n```bash\ngrep 'Jeremy Bowers' ./mystery/memberships/*\n# ./mystery/memberships/AAA:Jeremy Bowers\n# ./mystery/memberships/Delta_SkyMiles:Jeremy Bowers\n# ./mystery/memberships/Museum_of_Bash_History:Jeremy Bowers\n# ./mystery/memberships/Terminal_City_Library:Jeremy Bowers\n```\n\nGreat, seem like we use all the infomation. Let's us check the result using the command provide in the `solution` file\n```bash\n$ echo \"Jeremy Bowers\" | $(command -v md5 || command -v md5sum) | grep -qif /dev/stdin encoded && echo CORRECT\\! GREAT WORK, GUMSHOE. || echo SORRY, TRY AGAIN.\n# CORRECT! GREAT WORK, GUMSHOE.\n```\n\n## Conclusion\n'The Command Line Murders' is an excellent resource for individuals looking to enhance their Linux command-line skills in a playful and interactive manner.\nThe game effectively combines learning with entertainment, making it a valuable tool for both beginners and experienced users seeking to refine their command-line abilities.","src/content/blog/sad-servers/the-command-line-murders.mdx",[81],"fd49c3dc965ad7df","migration-guide-from-svn-to-git",{"id":164,"data":166,"body":171,"filePath":172,"assetImports":173,"digest":175,"deferredRender":68},{"title":167,"description":168,"pubDate":169,"heroImage":170},"Migrate SVN to Git","Learn how to migrate from SVN to Git seamlessly with our comprehensive CLI guide. Follow the necessary steps and resolve conflicts easily. Start using Git today!",["Date","2023-06-19T17:00:00.000Z"],"__ASTRO_IMAGE_../../assets/blog-placeholder-2.jpg","# Migrate SVN to Git\n\nSo you have a `svn` source and need to migrate to a new version control using `git`.\nBelow are the neecessary steps to do it.\n\n## Prequiresite\nThis's done in CLI so you will need\n- [svn](https://subversion.apache.org/packages.html) client\n- [git](https://git-scm.com/downloads) client\n- [git-svn](https://gitman.readthedocs.io/en/v2.0/setup/git-svn/)\n  otherwise, you will get an error\n  ``` bash\n  $ git svn -h\n  git: 'svn' is not a git-command. See 'git --help'.\n  Did you mean one of these?\n        fsck\n        show\n  ```\n\n## Note\n- `{source}`: path to the svn folder (Eg: ~/Document/code/`svn`/project-a)\n- `{target}`: path to the git folder (Eg: ~/Document/code/`git`/project-a)\n- `{svn-url}`: url to the svn source (Eg: `https://svn.my-organization.com/code/svn/project-a`)\n- `{git-url}`: url to the svn source (Eg: `https://git.my-organization.com/author/project-a`)\n\n## Step 1: prepare the `svn` code base\n``` bash\nsvn update\n```\nAlso, resolve any conflicts if necessary\n\n## Step 2: create authors file\n``` bash\n$ cd {source}\n$ svn log -q | awk -F '|' '/^r/ {sub(\"^ \", \"\", $2); sub(\" $\", \"\", $2); print $2\" = \"$2\" \u003C\"$2\">\"}' | sort -u > authors-transform.txt\n# `authors-transform.txt` is at `{source}/authors-transform.txt`\n```\n\nThese 2 command will create a new file `authors-transform.txt` at the `{source}` directory with the following format:\n``` text\nloginname = Joe User1 \u003Cuser@example.com>\nloginname2 = Joe User2 \u003Cuser@example.com>\n```\nWe will later serve this file to the `git svn -A` command.\nRead more about this argument in this [documentation](https://git-scm.com/docs/git-svn#Documentation/git-svn.txt--Altfilenamegt)\n\n## Step 3: clone from svn\n``` bash\n$ cd {target}\n$ git svn clone {svn-url} --no-metadata -A {source}/authors-transform.txt .\n```\nThese 2 commands will fetch, then clone with commit message, file changes, ....\n\nDepend on how extensive your `svn` code base is. This process will take some time to complete.\n``` bash\n$ git svn clone {svn-url} --no-metadata -A {source}/authors-transform.txt .\nInitialized empty Git repository in {target}/.git/\n\tA\tpackage-lock.json\n\tA\tapp/utils/index.js\n\tA\tapp/utils/Helper.js\n\tA\tapp/models/Test.js\n\tA\tapp/controllers/controller.js\n\tA\troutes/index.js\n\tA\tpackage.json\n\tA\tconfig/index.js\n\tA\tconfig/constant.js\nr1 = e3b0c44298fc1c149afbf4c8996fb92427ae41e4 (refs/remotes/git-svn)\n\tM\tapp/controllers/ApiController.js\n\tM\tapp/utils/Helper.js\n\tM\tapp/models/Test.js\n  ...\n  ...\nChecked out HEAD: {svn-url} r592\n```\n- `r1` is revision 1\n- `r592` is last revision. If your last revision is bigger than `1000`, then you make yourself some coffe\n\n\nNote:\n- `{svn-url}`: url to the svn repository\n- `{source}/authors-transform.txt`: path to the generated file in step 2\n- `.`: there's a dot (`.`) at the end of the 2nd command if you want to clone into `{target}`.\n  It's because we already cd to `{target}` at the 1st command.\n\n## Step 4: (Optional) create `.gitignore` file\n``` bash\n$ cd {target}\n\n# create .gitignore\n$ git svn show-ignore > .gitignore\n\n# add .gitignore\n$ git add .gitignore\n\n# commit .gitignore\n$ git commit -m 'Convert svn:ignore properties to .gitignore.'\n```\n\n## Step 5: Add remote origin and then push\nAt this point, the local branch is `master`\n``` bash\n$ git remote add origin {git-url}\n$ git push --set-upstream origin master\n```\n\nFrom now on, you good to go.\nLearn more about [`git-svn`](https://git-scm.com/docs/git-svn), and its [`basic examples`](https://git-scm.com/docs/git-svn#_basic_examples)","src/content/blog/migration-guide-from-svn-to-git.mdx",[174],"../../assets/blog-placeholder-2.jpg","f8a1b6eb508776f2"]