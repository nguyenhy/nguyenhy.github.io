---
import { Code } from "astro-expressive-code/components";
import { randStr } from "../utils/id";
import { combiner } from "./web";
import UITabs from "../UITabs.astro";
import type { Tab } from "../UITabs.types";

interface Props {
    html?: string;
    htmlFileName?: string;
    css?: string;
    cssFileName?: string;
    js?: string;
    jsFileName?: string;
    activeTab?: "html" | "css" | "js" | "preview";
}

const tabs: Tab[] = [];

const cid = randStr("o--playground-");
const props = Astro.props;

if (props.html) {
    tabs.push({
        id: "html",
        label: "HTML",
        attrs: {
            "data-lang": "html",
        },
        content: {
            tag: Code,
            attrs: {
                lang: "html",
                code: props.html,
                title: props.htmlFileName,
            },
        },
    });
}

if (props.css) {
    tabs.push({
        id: "css",
        label: "CSS",
        attrs: {
            "data-lang": "css",
        },
        content: {
            tag: Code,
            attrs: {
                lang: "css",
                code: props.css,
                title: props.cssFileName,
            },
        },
    });
}

if (props.js) {
    tabs.push({
        id: "js",
        label: "JS",
        attrs: {
            "data-lang": "js",
        },
        content: {
            tag: Code,
            attrs: {
                lang: "javascript",
                code: props.js,
                title: props.jsFileName,
            },
        },
    });
}

tabs.push({
    id: "preview",
    label: "Preview",
    content: {
        tag: "div",
        attrs: {
            class: "o--tab_content o--playground_preview m--preview",
        },
    },
});

const activeTab =
    props.activeTab && !tabs.find((item) => item.id === props.activeTab)
        ? props.activeTab
        : "preview";
---

<astro-playground class="o--playground" data-cid={cid}>
    <UITabs tabs={tabs} activeId={activeTab} />
</astro-playground>

<script is:inline define:vars={{ cid, props }} data-cid={cid}>
    window.$astroProps = window.$astroProps || {};
    window.$astroProps[cid] = props;

    const $script = document.querySelector(`script[data-cid="${cid}"]`);
    if ($script) {
        $script.remove();
    }
</script>
<script>
    import { run } from "./web";

    class AstroPlayground extends HTMLElement {
        connectedCallback() {
            const cid = this.dataset.cid || "";
            const props = window.$astroProps[cid];

            window.$astroProps[cid] = null;
            delete window.$astroProps[cid];

            const html = props.html || "";
            const css = props.css || "";
            const js = props.js || "";

            const iframe = run({
                container: this.querySelector(".o--playground_preview")!,
                source: {
                    html,
                    css,
                    js,
                },
            });

            const $parent = iframe.parentNode;
            if ($parent && $parent instanceof Element) {
                if ($parent.scrollHeight > 0) {
                    iframe.height = $parent.scrollHeight.toString();
                }
            }
        }
    }

    customElements.define("astro-playground", AstroPlayground);
</script>

<style scoped lang="scss">
    .o--playground {
        border: 1px solid black;
        border-radius: 4px;
        display: block;

        :global(.expressive-code) {
            height: 100%;
        }
        :global(.expressive-code > figure) {
            height: 100%;
            box-shadow: unset;
        }
        :global(.expressive-code > figure > pre) {
            height: 100%;
            border-radius: 0;
        }

        :global(iframe) {
            width: 100%;
            height: 100%;
            border: 0;
        }
    }
</style>
